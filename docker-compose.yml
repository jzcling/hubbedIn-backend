version: "3"

services:
    profile-service:
        build: 
            context: .
            dockerfile: ./services/profile/Dockerfile
        image: profile-service
        container_name: profile-service
        restart: always
        depends_on:
            - db
        ports:
            - ${PROFILE_SERVICE_PORT}:${PROFILE_SERVICE_PORT}
        networks:
            - backend
    project-service:
        build: 
            context: .
            dockerfile: ./services/project/Dockerfile
        image: project-service
        container_name: project-service
        restart: always
        depends_on:
            - db
        ports:
            - ${PROJECT_SERVICE_PORT}:${PROJECT_SERVICE_PORT}
        networks:
            - backend
    assessment-service:
        build: 
            context: .
            dockerfile: ./services/assessment/Dockerfile
        image: assessment-service
        container_name: assessment-service
        restart: always
        depends_on:
            - db
        ports:
            - ${ASSESSMENT_SERVICE_PORT}:${ASSESSMENT_SERVICE_PORT}
        networks:
            - backend
    db:
        image: postgres:13-alpine
        container_name: db
        restart: always
        env_file:
            - ./services/profile/configs/config.env
        environment: 
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
        ports:
            - ${DATABASE_PORT}:${DATABASE_PORT}
        volumes:
            - ./scripts/migrations/:/docker-entrypoint-initdb.d/
            - db-data:/var/lib/postgresql/data
            - postgresql:/var/lib/postgresql
        networks:
            - backend
    gateway:
        build: 
            context: .
            dockerfile: ./gateway/Dockerfile
        image: gateway
        container_name: gateway
        restart: always
        ports:
            - ${GATEWAY_PORT}:${GATEWAY_PORT}
        networks:
            - backend
    api-gateway:
        image: devopsfaith/krakend:config-watcher
        container_name: api-gateway
        restart: always
        depends_on:
            - db
        ports:
            - 8080:8080
        volumes:
            - ./gateway/krakend:/etc/krakend
        networks: 
            - backend
            - frontend
    sonarqube:
        image: sonarqube:community
        container_name: sonarqube
        restart: unless-stopped
        environment:
            SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
            SONAR_JDBC_USERNAME: ${POSTGRES_USER}
            SONAR_JDBC_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - 9000:9000
        volumes:
            - sonarqube-data:/opt/sonarqube/data
            - sonarqube-extensions:/opt/sonarqube/extensions
            - sonarqube-logs:/opt/sonarqube/logs
            - sonarqube-temp:/opt/sonarqube/temp
        networks: 
            - backend
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
  

networks:
    backend:
    frontend:

volumes:
    db-data:
    postgresql:
    sonarqube-data:
    sonarqube-logs:
    sonarqube-extensions:
    sonarqube-temp:
    