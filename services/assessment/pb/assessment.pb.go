// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: assessment.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Assessment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Notes        string               `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	ImageUrl     string               `protobuf:"bytes,5,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Difficulty   string               `protobuf:"bytes,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	TimeAllowed  uint64               `protobuf:"varint,7,opt,name=time_allowed,json=timeAllowed,proto3" json:"time_allowed,omitempty"`
	Type         string               `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Randomise    bool                 `protobuf:"varint,9,opt,name=randomise,proto3" json:"randomise,omitempty"`
	NumQuestions uint32               `protobuf:"varint,10,opt,name=num_questions,json=numQuestions,proto3" json:"num_questions,omitempty"`
	CanGoBack    bool                 `protobuf:"varint,11,opt,name=can_go_back,json=canGoBack,proto3" json:"can_go_back,omitempty"`
	Questions    []*Question          `protobuf:"bytes,12,rep,name=questions,proto3" json:"questions,omitempty"`
	Attempts     []*AssessmentAttempt `protobuf:"bytes,13,rep,name=attempts,proto3" json:"attempts,omitempty"`
}

func (x *Assessment) Reset() {
	*x = Assessment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assessment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assessment) ProtoMessage() {}

func (x *Assessment) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assessment.ProtoReflect.Descriptor instead.
func (*Assessment) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{0}
}

func (x *Assessment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Assessment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Assessment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Assessment) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Assessment) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Assessment) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *Assessment) GetTimeAllowed() uint64 {
	if x != nil {
		return x.TimeAllowed
	}
	return 0
}

func (x *Assessment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Assessment) GetRandomise() bool {
	if x != nil {
		return x.Randomise
	}
	return false
}

func (x *Assessment) GetNumQuestions() uint32 {
	if x != nil {
		return x.NumQuestions
	}
	return 0
}

func (x *Assessment) GetCanGoBack() bool {
	if x != nil {
		return x.CanGoBack
	}
	return false
}

func (x *Assessment) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *Assessment) GetAttempts() []*AssessmentAttempt {
	if x != nil {
		return x.Attempts
	}
	return nil
}

type CreateAssessmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assessment *Assessment `protobuf:"bytes,1,opt,name=assessment,proto3" json:"assessment,omitempty"`
}

func (x *CreateAssessmentRequest) Reset() {
	*x = CreateAssessmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssessmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssessmentRequest) ProtoMessage() {}

func (x *CreateAssessmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssessmentRequest.ProtoReflect.Descriptor instead.
func (*CreateAssessmentRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAssessmentRequest) GetAssessment() *Assessment {
	if x != nil {
		return x.Assessment
	}
	return nil
}

type GetAllAssessmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          []uint64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Difficulty  []string `protobuf:"bytes,3,rep,name=difficulty,proto3" json:"difficulty,omitempty"`
	Type        []string `protobuf:"bytes,4,rep,name=type,proto3" json:"type,omitempty"`
	CandidateId uint64   `protobuf:"varint,5,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"`
	Status      []string `protobuf:"bytes,6,rep,name=status,proto3" json:"status,omitempty"`
	MinScore    int64    `protobuf:"varint,7,opt,name=min_score,json=minScore,proto3" json:"min_score,omitempty"`
}

func (x *GetAllAssessmentsRequest) Reset() {
	*x = GetAllAssessmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAssessmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAssessmentsRequest) ProtoMessage() {}

func (x *GetAllAssessmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAssessmentsRequest.ProtoReflect.Descriptor instead.
func (*GetAllAssessmentsRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{2}
}

func (x *GetAllAssessmentsRequest) GetId() []uint64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetAllAssessmentsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAllAssessmentsRequest) GetDifficulty() []string {
	if x != nil {
		return x.Difficulty
	}
	return nil
}

func (x *GetAllAssessmentsRequest) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *GetAllAssessmentsRequest) GetCandidateId() uint64 {
	if x != nil {
		return x.CandidateId
	}
	return 0
}

func (x *GetAllAssessmentsRequest) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetAllAssessmentsRequest) GetMinScore() int64 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

type GetAllAssessmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assessments []*Assessment `protobuf:"bytes,1,rep,name=assessments,proto3" json:"assessments,omitempty"`
}

func (x *GetAllAssessmentsResponse) Reset() {
	*x = GetAllAssessmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAssessmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAssessmentsResponse) ProtoMessage() {}

func (x *GetAllAssessmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAssessmentsResponse.ProtoReflect.Descriptor instead.
func (*GetAllAssessmentsResponse) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{3}
}

func (x *GetAllAssessmentsResponse) GetAssessments() []*Assessment {
	if x != nil {
		return x.Assessments
	}
	return nil
}

type GetAssessmentByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAssessmentByIDRequest) Reset() {
	*x = GetAssessmentByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssessmentByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssessmentByIDRequest) ProtoMessage() {}

func (x *GetAssessmentByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssessmentByIDRequest.ProtoReflect.Descriptor instead.
func (*GetAssessmentByIDRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{4}
}

func (x *GetAssessmentByIDRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateAssessmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Assessment *Assessment `protobuf:"bytes,2,opt,name=assessment,proto3" json:"assessment,omitempty"`
}

func (x *UpdateAssessmentRequest) Reset() {
	*x = UpdateAssessmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssessmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssessmentRequest) ProtoMessage() {}

func (x *UpdateAssessmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssessmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateAssessmentRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateAssessmentRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAssessmentRequest) GetAssessment() *Assessment {
	if x != nil {
		return x.Assessment
	}
	return nil
}

type DeleteAssessmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAssessmentRequest) Reset() {
	*x = DeleteAssessmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssessmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssessmentRequest) ProtoMessage() {}

func (x *DeleteAssessmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssessmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteAssessmentRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteAssessmentRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteAssessmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAssessmentResponse) Reset() {
	*x = DeleteAssessmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssessmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssessmentResponse) ProtoMessage() {}

func (x *DeleteAssessmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssessmentResponse.ProtoReflect.Descriptor instead.
func (*DeleteAssessmentResponse) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{7}
}

type AssessmentAttempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssessmentId     uint64                 `protobuf:"varint,2,opt,name=assessment_id,json=assessmentId,proto3" json:"assessment_id,omitempty"`
	CandidateId      uint64                 `protobuf:"varint,3,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"`
	Status           string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	StartedAt        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	CompletedAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	CurrentQuestion  uint64                 `protobuf:"varint,7,opt,name=current_question,json=currentQuestion,proto3" json:"current_question,omitempty"`
	Score            int64                  `protobuf:"varint,8,opt,name=score,proto3" json:"score,omitempty"`
	Assessment       *Assessment            `protobuf:"bytes,9,opt,name=assessment,proto3" json:"assessment,omitempty"`
	Questions        []*Question            `protobuf:"bytes,10,rep,name=questions,proto3" json:"questions,omitempty"`
	QuestionAttempts []*AttemptQuestion     `protobuf:"bytes,11,rep,name=question_attempts,json=questionAttempts,proto3" json:"question_attempts,omitempty"`
}

func (x *AssessmentAttempt) Reset() {
	*x = AssessmentAttempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssessmentAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssessmentAttempt) ProtoMessage() {}

func (x *AssessmentAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssessmentAttempt.ProtoReflect.Descriptor instead.
func (*AssessmentAttempt) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{8}
}

func (x *AssessmentAttempt) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssessmentAttempt) GetAssessmentId() uint64 {
	if x != nil {
		return x.AssessmentId
	}
	return 0
}

func (x *AssessmentAttempt) GetCandidateId() uint64 {
	if x != nil {
		return x.CandidateId
	}
	return 0
}

func (x *AssessmentAttempt) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AssessmentAttempt) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *AssessmentAttempt) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *AssessmentAttempt) GetCurrentQuestion() uint64 {
	if x != nil {
		return x.CurrentQuestion
	}
	return 0
}

func (x *AssessmentAttempt) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *AssessmentAttempt) GetAssessment() *Assessment {
	if x != nil {
		return x.Assessment
	}
	return nil
}

func (x *AssessmentAttempt) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *AssessmentAttempt) GetQuestionAttempts() []*AttemptQuestion {
	if x != nil {
		return x.QuestionAttempts
	}
	return nil
}

type CreateAssessmentAttemptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssessmentAttempt *AssessmentAttempt `protobuf:"bytes,1,opt,name=assessment_attempt,json=assessmentAttempt,proto3" json:"assessment_attempt,omitempty"`
}

func (x *CreateAssessmentAttemptRequest) Reset() {
	*x = CreateAssessmentAttemptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssessmentAttemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssessmentAttemptRequest) ProtoMessage() {}

func (x *CreateAssessmentAttemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssessmentAttemptRequest.ProtoReflect.Descriptor instead.
func (*CreateAssessmentAttemptRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{9}
}

func (x *CreateAssessmentAttemptRequest) GetAssessmentAttempt() *AssessmentAttempt {
	if x != nil {
		return x.AssessmentAttempt
	}
	return nil
}

type GetAssessmentAttemptByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAssessmentAttemptByIDRequest) Reset() {
	*x = GetAssessmentAttemptByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssessmentAttemptByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssessmentAttemptByIDRequest) ProtoMessage() {}

func (x *GetAssessmentAttemptByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssessmentAttemptByIDRequest.ProtoReflect.Descriptor instead.
func (*GetAssessmentAttemptByIDRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{10}
}

func (x *GetAssessmentAttemptByIDRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateAssessmentAttemptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssessmentAttempt *AssessmentAttempt `protobuf:"bytes,2,opt,name=assessment_attempt,json=assessmentAttempt,proto3" json:"assessment_attempt,omitempty"`
}

func (x *UpdateAssessmentAttemptRequest) Reset() {
	*x = UpdateAssessmentAttemptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssessmentAttemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssessmentAttemptRequest) ProtoMessage() {}

func (x *UpdateAssessmentAttemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssessmentAttemptRequest.ProtoReflect.Descriptor instead.
func (*UpdateAssessmentAttemptRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateAssessmentAttemptRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAssessmentAttemptRequest) GetAssessmentAttempt() *AssessmentAttempt {
	if x != nil {
		return x.AssessmentAttempt
	}
	return nil
}

type DeleteAssessmentAttemptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAssessmentAttemptRequest) Reset() {
	*x = DeleteAssessmentAttemptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssessmentAttemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssessmentAttemptRequest) ProtoMessage() {}

func (x *DeleteAssessmentAttemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssessmentAttemptRequest.ProtoReflect.Descriptor instead.
func (*DeleteAssessmentAttemptRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteAssessmentAttemptRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteAssessmentAttemptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAssessmentAttemptResponse) Reset() {
	*x = DeleteAssessmentAttemptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssessmentAttemptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssessmentAttemptResponse) ProtoMessage() {}

func (x *DeleteAssessmentAttemptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssessmentAttemptResponse.ProtoReflect.Descriptor instead.
func (*DeleteAssessmentAttemptResponse) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{13}
}

type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedBy          uint64               `protobuf:"varint,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Type               string               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Text               string               `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	MediaUrl           string               `protobuf:"bytes,5,opt,name=media_url,json=mediaUrl,proto3" json:"media_url,omitempty"`
	Code               string               `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	Options            []string             `protobuf:"bytes,7,rep,name=options,proto3" json:"options,omitempty"`
	Answer             int64                `protobuf:"varint,8,opt,name=answer,proto3" json:"answer,omitempty"`
	Tags               []*Tag               `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	Assessments        []*Assessment        `protobuf:"bytes,10,rep,name=assessments,proto3" json:"assessments,omitempty"`
	AssessmentAttempts []*AssessmentAttempt `protobuf:"bytes,11,rep,name=assessment_attempts,json=assessmentAttempts,proto3" json:"assessment_attempts,omitempty"`
	Attempts           []*AttemptQuestion   `protobuf:"bytes,12,rep,name=attempts,proto3" json:"attempts,omitempty"`
}

func (x *Question) Reset() {
	*x = Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{14}
}

func (x *Question) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Question) GetCreatedBy() uint64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *Question) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Question) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Question) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *Question) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Question) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Question) GetAnswer() int64 {
	if x != nil {
		return x.Answer
	}
	return 0
}

func (x *Question) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Question) GetAssessments() []*Assessment {
	if x != nil {
		return x.Assessments
	}
	return nil
}

func (x *Question) GetAssessmentAttempts() []*AssessmentAttempt {
	if x != nil {
		return x.AssessmentAttempts
	}
	return nil
}

func (x *Question) GetAttempts() []*AttemptQuestion {
	if x != nil {
		return x.Attempts
	}
	return nil
}

type CreateQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question *Question `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
}

func (x *CreateQuestionRequest) Reset() {
	*x = CreateQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionRequest) ProtoMessage() {}

func (x *CreateQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionRequest.ProtoReflect.Descriptor instead.
func (*CreateQuestionRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{15}
}

func (x *CreateQuestionRequest) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

type BulkCreateQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questions []*Question `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *BulkCreateQuestionRequest) Reset() {
	*x = BulkCreateQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateQuestionRequest) ProtoMessage() {}

func (x *BulkCreateQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateQuestionRequest.ProtoReflect.Descriptor instead.
func (*BulkCreateQuestionRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{16}
}

func (x *BulkCreateQuestionRequest) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

type BulkCreateQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questions []*Question `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *BulkCreateQuestionResponse) Reset() {
	*x = BulkCreateQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkCreateQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkCreateQuestionResponse) ProtoMessage() {}

func (x *BulkCreateQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkCreateQuestionResponse.ProtoReflect.Descriptor instead.
func (*BulkCreateQuestionResponse) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{17}
}

func (x *BulkCreateQuestionResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

type GetAllQuestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   []uint64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GetAllQuestionsRequest) Reset() {
	*x = GetAllQuestionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllQuestionsRequest) ProtoMessage() {}

func (x *GetAllQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllQuestionsRequest.ProtoReflect.Descriptor instead.
func (*GetAllQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{18}
}

func (x *GetAllQuestionsRequest) GetId() []uint64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetAllQuestionsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GetAllQuestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questions []*Question `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *GetAllQuestionsResponse) Reset() {
	*x = GetAllQuestionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllQuestionsResponse) ProtoMessage() {}

func (x *GetAllQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllQuestionsResponse.ProtoReflect.Descriptor instead.
func (*GetAllQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{19}
}

func (x *GetAllQuestionsResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

type GetQuestionByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetQuestionByIDRequest) Reset() {
	*x = GetQuestionByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionByIDRequest) ProtoMessage() {}

func (x *GetQuestionByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionByIDRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionByIDRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{20}
}

func (x *GetQuestionByIDRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Question *Question `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
}

func (x *UpdateQuestionRequest) Reset() {
	*x = UpdateQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionRequest) ProtoMessage() {}

func (x *UpdateQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuestionRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateQuestionRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateQuestionRequest) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

type DeleteQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteQuestionRequest) Reset() {
	*x = DeleteQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionRequest) ProtoMessage() {}

func (x *DeleteQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuestionRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteQuestionRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteQuestionResponse) Reset() {
	*x = DeleteQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionResponse) ProtoMessage() {}

func (x *DeleteQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionResponse.ProtoReflect.Descriptor instead.
func (*DeleteQuestionResponse) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{23}
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{24}
}

func (x *Tag) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag *Tag `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *CreateTagRequest) Reset() {
	*x = CreateTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagRequest) ProtoMessage() {}

func (x *CreateTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagRequest.ProtoReflect.Descriptor instead.
func (*CreateTagRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{25}
}

func (x *CreateTagRequest) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

type DeleteTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTagRequest) Reset() {
	*x = DeleteTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagRequest) ProtoMessage() {}

func (x *DeleteTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagRequest.ProtoReflect.Descriptor instead.
func (*DeleteTagRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteTagRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTagResponse) Reset() {
	*x = DeleteTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagResponse) ProtoMessage() {}

func (x *DeleteTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagResponse.ProtoReflect.Descriptor instead.
func (*DeleteTagResponse) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{27}
}

type QuestionTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	QuestionId uint64 `protobuf:"varint,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	TagId      uint64 `protobuf:"varint,3,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
}

func (x *QuestionTag) Reset() {
	*x = QuestionTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionTag) ProtoMessage() {}

func (x *QuestionTag) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionTag.ProtoReflect.Descriptor instead.
func (*QuestionTag) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{28}
}

func (x *QuestionTag) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuestionTag) GetQuestionId() uint64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *QuestionTag) GetTagId() uint64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

type AttemptQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AttemptId   uint64                 `protobuf:"varint,2,opt,name=attempt_id,json=attemptId,proto3" json:"attempt_id,omitempty"`
	QuestionId  uint64                 `protobuf:"varint,3,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	CandidateId uint64                 `protobuf:"varint,4,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"`
	Selection   int64                  `protobuf:"varint,5,opt,name=selection,proto3" json:"selection,omitempty"`
	Text        string                 `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	CmMode      string                 `protobuf:"bytes,7,opt,name=cm_mode,json=cmMode,proto3" json:"cm_mode,omitempty"`
	Score       int64                  `protobuf:"varint,8,opt,name=score,proto3" json:"score,omitempty"`
	TimeTaken   uint64                 `protobuf:"varint,9,opt,name=time_taken,json=timeTaken,proto3" json:"time_taken,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *AttemptQuestion) Reset() {
	*x = AttemptQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttemptQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttemptQuestion) ProtoMessage() {}

func (x *AttemptQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttemptQuestion.ProtoReflect.Descriptor instead.
func (*AttemptQuestion) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{29}
}

func (x *AttemptQuestion) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AttemptQuestion) GetAttemptId() uint64 {
	if x != nil {
		return x.AttemptId
	}
	return 0
}

func (x *AttemptQuestion) GetQuestionId() uint64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *AttemptQuestion) GetCandidateId() uint64 {
	if x != nil {
		return x.CandidateId
	}
	return 0
}

func (x *AttemptQuestion) GetSelection() int64 {
	if x != nil {
		return x.Selection
	}
	return 0
}

func (x *AttemptQuestion) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AttemptQuestion) GetCmMode() string {
	if x != nil {
		return x.CmMode
	}
	return ""
}

func (x *AttemptQuestion) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *AttemptQuestion) GetTimeTaken() uint64 {
	if x != nil {
		return x.TimeTaken
	}
	return 0
}

func (x *AttemptQuestion) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AttemptQuestion) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpdateAttemptQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AttemptQuestion *AttemptQuestion `protobuf:"bytes,2,opt,name=attempt_question,json=attemptQuestion,proto3" json:"attempt_question,omitempty"`
}

func (x *UpdateAttemptQuestionRequest) Reset() {
	*x = UpdateAttemptQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAttemptQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAttemptQuestionRequest) ProtoMessage() {}

func (x *UpdateAttemptQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAttemptQuestionRequest.ProtoReflect.Descriptor instead.
func (*UpdateAttemptQuestionRequest) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateAttemptQuestionRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAttemptQuestionRequest) GetAttemptQuestion() *AttemptQuestion {
	if x != nil {
		return x.AttemptQuestion
	}
	return nil
}

type AssessmentQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssessmentId uint64 `protobuf:"varint,2,opt,name=assessment_id,json=assessmentId,proto3" json:"assessment_id,omitempty"`
	QuestionId   uint64 `protobuf:"varint,3,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
}

func (x *AssessmentQuestion) Reset() {
	*x = AssessmentQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assessment_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssessmentQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssessmentQuestion) ProtoMessage() {}

func (x *AssessmentQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_assessment_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssessmentQuestion.ProtoReflect.Descriptor instead.
func (*AssessmentQuestion) Descriptor() ([]byte, []int) {
	return file_assessment_proto_rawDescGZIP(), []int{31}
}

func (x *AssessmentQuestion) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssessmentQuestion) GetAssessmentId() uint64 {
	if x != nil {
		return x.AssessmentId
	}
	return 0
}

func (x *AssessmentQuestion) GetQuestionId() uint64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

var File_assessment_proto protoreflect.FileDescriptor

var file_assessment_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x03, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x73,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x67,
	0x6f, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61,
	0x6e, 0x47, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xca, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x4d,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2a, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdc, 0x03, 0x0a, 0x11,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x09,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0x66, 0x0a, 0x1e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x12,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52,
	0x11, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x22, 0x31, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x76, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x11, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x30, 0x0a,
	0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x21, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8c, 0x03, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x12, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x12, 0x2f, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x22, 0x41, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x19, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x48, 0x0a,
	0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x45, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x28, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x03,
	0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61,
	0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x22, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x55, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x22, 0xfa, 0x02, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x6e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x32,
	0xe3, 0x10, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x0f,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x69, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x88, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x16,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x3a, 0x12, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x7b, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5b, 0x0a, 0x1d, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x12, 0x8d, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x37, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x1a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x3a, 0x12, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x12, 0x59, 0x0a, 0x1c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12,
	0x87, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5a, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x0d, 0x2f, 0x76,
	0x31, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x12, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e,
	0x42, 0x75, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75, 0x6c, 0x6b, 0x2f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x61, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f,
	0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5f, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x1a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x41, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22,
	0x08, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x03, 0x74, 0x61, 0x67, 0x12, 0x4f,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x14, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f,
	0x2a, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x83, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x1a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x3a, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x18, 0x5a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_assessment_proto_rawDescOnce sync.Once
	file_assessment_proto_rawDescData = file_assessment_proto_rawDesc
)

func file_assessment_proto_rawDescGZIP() []byte {
	file_assessment_proto_rawDescOnce.Do(func() {
		file_assessment_proto_rawDescData = protoimpl.X.CompressGZIP(file_assessment_proto_rawDescData)
	})
	return file_assessment_proto_rawDescData
}

var file_assessment_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_assessment_proto_goTypes = []interface{}{
	(*Assessment)(nil),                      // 0: pb.Assessment
	(*CreateAssessmentRequest)(nil),         // 1: pb.CreateAssessmentRequest
	(*GetAllAssessmentsRequest)(nil),        // 2: pb.GetAllAssessmentsRequest
	(*GetAllAssessmentsResponse)(nil),       // 3: pb.GetAllAssessmentsResponse
	(*GetAssessmentByIDRequest)(nil),        // 4: pb.GetAssessmentByIDRequest
	(*UpdateAssessmentRequest)(nil),         // 5: pb.UpdateAssessmentRequest
	(*DeleteAssessmentRequest)(nil),         // 6: pb.DeleteAssessmentRequest
	(*DeleteAssessmentResponse)(nil),        // 7: pb.DeleteAssessmentResponse
	(*AssessmentAttempt)(nil),               // 8: pb.AssessmentAttempt
	(*CreateAssessmentAttemptRequest)(nil),  // 9: pb.CreateAssessmentAttemptRequest
	(*GetAssessmentAttemptByIDRequest)(nil), // 10: pb.GetAssessmentAttemptByIDRequest
	(*UpdateAssessmentAttemptRequest)(nil),  // 11: pb.UpdateAssessmentAttemptRequest
	(*DeleteAssessmentAttemptRequest)(nil),  // 12: pb.DeleteAssessmentAttemptRequest
	(*DeleteAssessmentAttemptResponse)(nil), // 13: pb.DeleteAssessmentAttemptResponse
	(*Question)(nil),                        // 14: pb.Question
	(*CreateQuestionRequest)(nil),           // 15: pb.CreateQuestionRequest
	(*BulkCreateQuestionRequest)(nil),       // 16: pb.BulkCreateQuestionRequest
	(*BulkCreateQuestionResponse)(nil),      // 17: pb.BulkCreateQuestionResponse
	(*GetAllQuestionsRequest)(nil),          // 18: pb.GetAllQuestionsRequest
	(*GetAllQuestionsResponse)(nil),         // 19: pb.GetAllQuestionsResponse
	(*GetQuestionByIDRequest)(nil),          // 20: pb.GetQuestionByIDRequest
	(*UpdateQuestionRequest)(nil),           // 21: pb.UpdateQuestionRequest
	(*DeleteQuestionRequest)(nil),           // 22: pb.DeleteQuestionRequest
	(*DeleteQuestionResponse)(nil),          // 23: pb.DeleteQuestionResponse
	(*Tag)(nil),                             // 24: pb.Tag
	(*CreateTagRequest)(nil),                // 25: pb.CreateTagRequest
	(*DeleteTagRequest)(nil),                // 26: pb.DeleteTagRequest
	(*DeleteTagResponse)(nil),               // 27: pb.DeleteTagResponse
	(*QuestionTag)(nil),                     // 28: pb.QuestionTag
	(*AttemptQuestion)(nil),                 // 29: pb.AttemptQuestion
	(*UpdateAttemptQuestionRequest)(nil),    // 30: pb.UpdateAttemptQuestionRequest
	(*AssessmentQuestion)(nil),              // 31: pb.AssessmentQuestion
	(*timestamppb.Timestamp)(nil),           // 32: google.protobuf.Timestamp
}
var file_assessment_proto_depIdxs = []int32{
	14, // 0: pb.Assessment.questions:type_name -> pb.Question
	8,  // 1: pb.Assessment.attempts:type_name -> pb.AssessmentAttempt
	0,  // 2: pb.CreateAssessmentRequest.assessment:type_name -> pb.Assessment
	0,  // 3: pb.GetAllAssessmentsResponse.assessments:type_name -> pb.Assessment
	0,  // 4: pb.UpdateAssessmentRequest.assessment:type_name -> pb.Assessment
	32, // 5: pb.AssessmentAttempt.started_at:type_name -> google.protobuf.Timestamp
	32, // 6: pb.AssessmentAttempt.completed_at:type_name -> google.protobuf.Timestamp
	0,  // 7: pb.AssessmentAttempt.assessment:type_name -> pb.Assessment
	14, // 8: pb.AssessmentAttempt.questions:type_name -> pb.Question
	29, // 9: pb.AssessmentAttempt.question_attempts:type_name -> pb.AttemptQuestion
	8,  // 10: pb.CreateAssessmentAttemptRequest.assessment_attempt:type_name -> pb.AssessmentAttempt
	8,  // 11: pb.UpdateAssessmentAttemptRequest.assessment_attempt:type_name -> pb.AssessmentAttempt
	24, // 12: pb.Question.tags:type_name -> pb.Tag
	0,  // 13: pb.Question.assessments:type_name -> pb.Assessment
	8,  // 14: pb.Question.assessment_attempts:type_name -> pb.AssessmentAttempt
	29, // 15: pb.Question.attempts:type_name -> pb.AttemptQuestion
	14, // 16: pb.CreateQuestionRequest.question:type_name -> pb.Question
	14, // 17: pb.BulkCreateQuestionRequest.questions:type_name -> pb.Question
	14, // 18: pb.BulkCreateQuestionResponse.questions:type_name -> pb.Question
	14, // 19: pb.GetAllQuestionsResponse.questions:type_name -> pb.Question
	14, // 20: pb.UpdateQuestionRequest.question:type_name -> pb.Question
	24, // 21: pb.CreateTagRequest.tag:type_name -> pb.Tag
	32, // 22: pb.AttemptQuestion.created_at:type_name -> google.protobuf.Timestamp
	32, // 23: pb.AttemptQuestion.updated_at:type_name -> google.protobuf.Timestamp
	29, // 24: pb.UpdateAttemptQuestionRequest.attempt_question:type_name -> pb.AttemptQuestion
	1,  // 25: pb.AssessmentService.CreateAssessment:input_type -> pb.CreateAssessmentRequest
	2,  // 26: pb.AssessmentService.GetAllAssessments:input_type -> pb.GetAllAssessmentsRequest
	4,  // 27: pb.AssessmentService.GetAssessmentByID:input_type -> pb.GetAssessmentByIDRequest
	5,  // 28: pb.AssessmentService.UpdateAssessment:input_type -> pb.UpdateAssessmentRequest
	6,  // 29: pb.AssessmentService.DeleteAssessment:input_type -> pb.DeleteAssessmentRequest
	9,  // 30: pb.AssessmentService.CreateAssessmentAttempt:input_type -> pb.CreateAssessmentAttemptRequest
	10, // 31: pb.AssessmentService.GetAssessmentAttemptByID:input_type -> pb.GetAssessmentAttemptByIDRequest
	10, // 32: pb.AssessmentService.LocalGetAssessmentAttemptByID:input_type -> pb.GetAssessmentAttemptByIDRequest
	11, // 33: pb.AssessmentService.UpdateAssessmentAttempt:input_type -> pb.UpdateAssessmentAttemptRequest
	11, // 34: pb.AssessmentService.LocalUpdateAssessmentAttempt:input_type -> pb.UpdateAssessmentAttemptRequest
	12, // 35: pb.AssessmentService.DeleteAssessmentAttempt:input_type -> pb.DeleteAssessmentAttemptRequest
	15, // 36: pb.AssessmentService.CreateQuestion:input_type -> pb.CreateQuestionRequest
	16, // 37: pb.AssessmentService.BulkCreateQuestion:input_type -> pb.BulkCreateQuestionRequest
	18, // 38: pb.AssessmentService.GetAllQuestions:input_type -> pb.GetAllQuestionsRequest
	20, // 39: pb.AssessmentService.GetQuestionByID:input_type -> pb.GetQuestionByIDRequest
	21, // 40: pb.AssessmentService.UpdateQuestion:input_type -> pb.UpdateQuestionRequest
	22, // 41: pb.AssessmentService.DeleteQuestion:input_type -> pb.DeleteQuestionRequest
	25, // 42: pb.AssessmentService.CreateTag:input_type -> pb.CreateTagRequest
	26, // 43: pb.AssessmentService.DeleteTag:input_type -> pb.DeleteTagRequest
	30, // 44: pb.AssessmentService.UpdateAttemptQuestion:input_type -> pb.UpdateAttemptQuestionRequest
	0,  // 45: pb.AssessmentService.CreateAssessment:output_type -> pb.Assessment
	3,  // 46: pb.AssessmentService.GetAllAssessments:output_type -> pb.GetAllAssessmentsResponse
	0,  // 47: pb.AssessmentService.GetAssessmentByID:output_type -> pb.Assessment
	0,  // 48: pb.AssessmentService.UpdateAssessment:output_type -> pb.Assessment
	7,  // 49: pb.AssessmentService.DeleteAssessment:output_type -> pb.DeleteAssessmentResponse
	8,  // 50: pb.AssessmentService.CreateAssessmentAttempt:output_type -> pb.AssessmentAttempt
	8,  // 51: pb.AssessmentService.GetAssessmentAttemptByID:output_type -> pb.AssessmentAttempt
	8,  // 52: pb.AssessmentService.LocalGetAssessmentAttemptByID:output_type -> pb.AssessmentAttempt
	8,  // 53: pb.AssessmentService.UpdateAssessmentAttempt:output_type -> pb.AssessmentAttempt
	8,  // 54: pb.AssessmentService.LocalUpdateAssessmentAttempt:output_type -> pb.AssessmentAttempt
	13, // 55: pb.AssessmentService.DeleteAssessmentAttempt:output_type -> pb.DeleteAssessmentAttemptResponse
	14, // 56: pb.AssessmentService.CreateQuestion:output_type -> pb.Question
	17, // 57: pb.AssessmentService.BulkCreateQuestion:output_type -> pb.BulkCreateQuestionResponse
	19, // 58: pb.AssessmentService.GetAllQuestions:output_type -> pb.GetAllQuestionsResponse
	14, // 59: pb.AssessmentService.GetQuestionByID:output_type -> pb.Question
	14, // 60: pb.AssessmentService.UpdateQuestion:output_type -> pb.Question
	23, // 61: pb.AssessmentService.DeleteQuestion:output_type -> pb.DeleteQuestionResponse
	24, // 62: pb.AssessmentService.CreateTag:output_type -> pb.Tag
	27, // 63: pb.AssessmentService.DeleteTag:output_type -> pb.DeleteTagResponse
	29, // 64: pb.AssessmentService.UpdateAttemptQuestion:output_type -> pb.AttemptQuestion
	45, // [45:65] is the sub-list for method output_type
	25, // [25:45] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_assessment_proto_init() }
func file_assessment_proto_init() {
	if File_assessment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_assessment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assessment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAssessmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllAssessmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllAssessmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssessmentByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssessmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssessmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssessmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssessmentAttempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAssessmentAttemptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssessmentAttemptByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssessmentAttemptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssessmentAttemptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssessmentAttemptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkCreateQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllQuestionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllQuestionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttemptQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAttemptQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assessment_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssessmentQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_assessment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_assessment_proto_goTypes,
		DependencyIndexes: file_assessment_proto_depIdxs,
		MessageInfos:      file_assessment_proto_msgTypes,
	}.Build()
	File_assessment_proto = out.File
	file_assessment_proto_rawDesc = nil
	file_assessment_proto_goTypes = nil
	file_assessment_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AssessmentServiceClient is the client API for AssessmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AssessmentServiceClient interface {
	CreateAssessment(ctx context.Context, in *CreateAssessmentRequest, opts ...grpc.CallOption) (*Assessment, error)
	GetAllAssessments(ctx context.Context, in *GetAllAssessmentsRequest, opts ...grpc.CallOption) (*GetAllAssessmentsResponse, error)
	GetAssessmentByID(ctx context.Context, in *GetAssessmentByIDRequest, opts ...grpc.CallOption) (*Assessment, error)
	UpdateAssessment(ctx context.Context, in *UpdateAssessmentRequest, opts ...grpc.CallOption) (*Assessment, error)
	DeleteAssessment(ctx context.Context, in *DeleteAssessmentRequest, opts ...grpc.CallOption) (*DeleteAssessmentResponse, error)
	CreateAssessmentAttempt(ctx context.Context, in *CreateAssessmentAttemptRequest, opts ...grpc.CallOption) (*AssessmentAttempt, error)
	GetAssessmentAttemptByID(ctx context.Context, in *GetAssessmentAttemptByIDRequest, opts ...grpc.CallOption) (*AssessmentAttempt, error)
	LocalGetAssessmentAttemptByID(ctx context.Context, in *GetAssessmentAttemptByIDRequest, opts ...grpc.CallOption) (*AssessmentAttempt, error)
	UpdateAssessmentAttempt(ctx context.Context, in *UpdateAssessmentAttemptRequest, opts ...grpc.CallOption) (*AssessmentAttempt, error)
	LocalUpdateAssessmentAttempt(ctx context.Context, in *UpdateAssessmentAttemptRequest, opts ...grpc.CallOption) (*AssessmentAttempt, error)
	DeleteAssessmentAttempt(ctx context.Context, in *DeleteAssessmentAttemptRequest, opts ...grpc.CallOption) (*DeleteAssessmentAttemptResponse, error)
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*Question, error)
	BulkCreateQuestion(ctx context.Context, in *BulkCreateQuestionRequest, opts ...grpc.CallOption) (*BulkCreateQuestionResponse, error)
	GetAllQuestions(ctx context.Context, in *GetAllQuestionsRequest, opts ...grpc.CallOption) (*GetAllQuestionsResponse, error)
	GetQuestionByID(ctx context.Context, in *GetQuestionByIDRequest, opts ...grpc.CallOption) (*Question, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*Question, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*Tag, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error)
	UpdateAttemptQuestion(ctx context.Context, in *UpdateAttemptQuestionRequest, opts ...grpc.CallOption) (*AttemptQuestion, error)
}

type assessmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssessmentServiceClient(cc grpc.ClientConnInterface) AssessmentServiceClient {
	return &assessmentServiceClient{cc}
}

func (c *assessmentServiceClient) CreateAssessment(ctx context.Context, in *CreateAssessmentRequest, opts ...grpc.CallOption) (*Assessment, error) {
	out := new(Assessment)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/CreateAssessment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) GetAllAssessments(ctx context.Context, in *GetAllAssessmentsRequest, opts ...grpc.CallOption) (*GetAllAssessmentsResponse, error) {
	out := new(GetAllAssessmentsResponse)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/GetAllAssessments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) GetAssessmentByID(ctx context.Context, in *GetAssessmentByIDRequest, opts ...grpc.CallOption) (*Assessment, error) {
	out := new(Assessment)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/GetAssessmentByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) UpdateAssessment(ctx context.Context, in *UpdateAssessmentRequest, opts ...grpc.CallOption) (*Assessment, error) {
	out := new(Assessment)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/UpdateAssessment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) DeleteAssessment(ctx context.Context, in *DeleteAssessmentRequest, opts ...grpc.CallOption) (*DeleteAssessmentResponse, error) {
	out := new(DeleteAssessmentResponse)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/DeleteAssessment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) CreateAssessmentAttempt(ctx context.Context, in *CreateAssessmentAttemptRequest, opts ...grpc.CallOption) (*AssessmentAttempt, error) {
	out := new(AssessmentAttempt)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/CreateAssessmentAttempt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) GetAssessmentAttemptByID(ctx context.Context, in *GetAssessmentAttemptByIDRequest, opts ...grpc.CallOption) (*AssessmentAttempt, error) {
	out := new(AssessmentAttempt)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/GetAssessmentAttemptByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) LocalGetAssessmentAttemptByID(ctx context.Context, in *GetAssessmentAttemptByIDRequest, opts ...grpc.CallOption) (*AssessmentAttempt, error) {
	out := new(AssessmentAttempt)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/LocalGetAssessmentAttemptByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) UpdateAssessmentAttempt(ctx context.Context, in *UpdateAssessmentAttemptRequest, opts ...grpc.CallOption) (*AssessmentAttempt, error) {
	out := new(AssessmentAttempt)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/UpdateAssessmentAttempt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) LocalUpdateAssessmentAttempt(ctx context.Context, in *UpdateAssessmentAttemptRequest, opts ...grpc.CallOption) (*AssessmentAttempt, error) {
	out := new(AssessmentAttempt)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/LocalUpdateAssessmentAttempt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) DeleteAssessmentAttempt(ctx context.Context, in *DeleteAssessmentAttemptRequest, opts ...grpc.CallOption) (*DeleteAssessmentAttemptResponse, error) {
	out := new(DeleteAssessmentAttemptResponse)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/DeleteAssessmentAttempt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*Question, error) {
	out := new(Question)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/CreateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) BulkCreateQuestion(ctx context.Context, in *BulkCreateQuestionRequest, opts ...grpc.CallOption) (*BulkCreateQuestionResponse, error) {
	out := new(BulkCreateQuestionResponse)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/BulkCreateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) GetAllQuestions(ctx context.Context, in *GetAllQuestionsRequest, opts ...grpc.CallOption) (*GetAllQuestionsResponse, error) {
	out := new(GetAllQuestionsResponse)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/GetAllQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) GetQuestionByID(ctx context.Context, in *GetQuestionByIDRequest, opts ...grpc.CallOption) (*Question, error) {
	out := new(Question)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/GetQuestionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*Question, error) {
	out := new(Question)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/UpdateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error) {
	out := new(DeleteQuestionResponse)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/DeleteQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error) {
	out := new(DeleteTagResponse)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) UpdateAttemptQuestion(ctx context.Context, in *UpdateAttemptQuestionRequest, opts ...grpc.CallOption) (*AttemptQuestion, error) {
	out := new(AttemptQuestion)
	err := c.cc.Invoke(ctx, "/pb.AssessmentService/UpdateAttemptQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssessmentServiceServer is the server API for AssessmentService service.
type AssessmentServiceServer interface {
	CreateAssessment(context.Context, *CreateAssessmentRequest) (*Assessment, error)
	GetAllAssessments(context.Context, *GetAllAssessmentsRequest) (*GetAllAssessmentsResponse, error)
	GetAssessmentByID(context.Context, *GetAssessmentByIDRequest) (*Assessment, error)
	UpdateAssessment(context.Context, *UpdateAssessmentRequest) (*Assessment, error)
	DeleteAssessment(context.Context, *DeleteAssessmentRequest) (*DeleteAssessmentResponse, error)
	CreateAssessmentAttempt(context.Context, *CreateAssessmentAttemptRequest) (*AssessmentAttempt, error)
	GetAssessmentAttemptByID(context.Context, *GetAssessmentAttemptByIDRequest) (*AssessmentAttempt, error)
	LocalGetAssessmentAttemptByID(context.Context, *GetAssessmentAttemptByIDRequest) (*AssessmentAttempt, error)
	UpdateAssessmentAttempt(context.Context, *UpdateAssessmentAttemptRequest) (*AssessmentAttempt, error)
	LocalUpdateAssessmentAttempt(context.Context, *UpdateAssessmentAttemptRequest) (*AssessmentAttempt, error)
	DeleteAssessmentAttempt(context.Context, *DeleteAssessmentAttemptRequest) (*DeleteAssessmentAttemptResponse, error)
	CreateQuestion(context.Context, *CreateQuestionRequest) (*Question, error)
	BulkCreateQuestion(context.Context, *BulkCreateQuestionRequest) (*BulkCreateQuestionResponse, error)
	GetAllQuestions(context.Context, *GetAllQuestionsRequest) (*GetAllQuestionsResponse, error)
	GetQuestionByID(context.Context, *GetQuestionByIDRequest) (*Question, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*Question, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error)
	CreateTag(context.Context, *CreateTagRequest) (*Tag, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error)
	UpdateAttemptQuestion(context.Context, *UpdateAttemptQuestionRequest) (*AttemptQuestion, error)
}

// UnimplementedAssessmentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAssessmentServiceServer struct {
}

func (*UnimplementedAssessmentServiceServer) CreateAssessment(context.Context, *CreateAssessmentRequest) (*Assessment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssessment not implemented")
}
func (*UnimplementedAssessmentServiceServer) GetAllAssessments(context.Context, *GetAllAssessmentsRequest) (*GetAllAssessmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssessments not implemented")
}
func (*UnimplementedAssessmentServiceServer) GetAssessmentByID(context.Context, *GetAssessmentByIDRequest) (*Assessment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssessmentByID not implemented")
}
func (*UnimplementedAssessmentServiceServer) UpdateAssessment(context.Context, *UpdateAssessmentRequest) (*Assessment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssessment not implemented")
}
func (*UnimplementedAssessmentServiceServer) DeleteAssessment(context.Context, *DeleteAssessmentRequest) (*DeleteAssessmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssessment not implemented")
}
func (*UnimplementedAssessmentServiceServer) CreateAssessmentAttempt(context.Context, *CreateAssessmentAttemptRequest) (*AssessmentAttempt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssessmentAttempt not implemented")
}
func (*UnimplementedAssessmentServiceServer) GetAssessmentAttemptByID(context.Context, *GetAssessmentAttemptByIDRequest) (*AssessmentAttempt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssessmentAttemptByID not implemented")
}
func (*UnimplementedAssessmentServiceServer) LocalGetAssessmentAttemptByID(context.Context, *GetAssessmentAttemptByIDRequest) (*AssessmentAttempt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocalGetAssessmentAttemptByID not implemented")
}
func (*UnimplementedAssessmentServiceServer) UpdateAssessmentAttempt(context.Context, *UpdateAssessmentAttemptRequest) (*AssessmentAttempt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssessmentAttempt not implemented")
}
func (*UnimplementedAssessmentServiceServer) LocalUpdateAssessmentAttempt(context.Context, *UpdateAssessmentAttemptRequest) (*AssessmentAttempt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocalUpdateAssessmentAttempt not implemented")
}
func (*UnimplementedAssessmentServiceServer) DeleteAssessmentAttempt(context.Context, *DeleteAssessmentAttemptRequest) (*DeleteAssessmentAttemptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssessmentAttempt not implemented")
}
func (*UnimplementedAssessmentServiceServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (*UnimplementedAssessmentServiceServer) BulkCreateQuestion(context.Context, *BulkCreateQuestionRequest) (*BulkCreateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateQuestion not implemented")
}
func (*UnimplementedAssessmentServiceServer) GetAllQuestions(context.Context, *GetAllQuestionsRequest) (*GetAllQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllQuestions not implemented")
}
func (*UnimplementedAssessmentServiceServer) GetQuestionByID(context.Context, *GetQuestionByIDRequest) (*Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionByID not implemented")
}
func (*UnimplementedAssessmentServiceServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (*UnimplementedAssessmentServiceServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (*UnimplementedAssessmentServiceServer) CreateTag(context.Context, *CreateTagRequest) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (*UnimplementedAssessmentServiceServer) DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (*UnimplementedAssessmentServiceServer) UpdateAttemptQuestion(context.Context, *UpdateAttemptQuestionRequest) (*AttemptQuestion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttemptQuestion not implemented")
}

func RegisterAssessmentServiceServer(s *grpc.Server, srv AssessmentServiceServer) {
	s.RegisterService(&_AssessmentService_serviceDesc, srv)
}

func _AssessmentService_CreateAssessment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssessmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).CreateAssessment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/CreateAssessment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).CreateAssessment(ctx, req.(*CreateAssessmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_GetAllAssessments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssessmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).GetAllAssessments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/GetAllAssessments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).GetAllAssessments(ctx, req.(*GetAllAssessmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_GetAssessmentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssessmentByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).GetAssessmentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/GetAssessmentByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).GetAssessmentByID(ctx, req.(*GetAssessmentByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_UpdateAssessment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssessmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).UpdateAssessment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/UpdateAssessment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).UpdateAssessment(ctx, req.(*UpdateAssessmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_DeleteAssessment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssessmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).DeleteAssessment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/DeleteAssessment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).DeleteAssessment(ctx, req.(*DeleteAssessmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_CreateAssessmentAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssessmentAttemptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).CreateAssessmentAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/CreateAssessmentAttempt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).CreateAssessmentAttempt(ctx, req.(*CreateAssessmentAttemptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_GetAssessmentAttemptByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssessmentAttemptByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).GetAssessmentAttemptByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/GetAssessmentAttemptByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).GetAssessmentAttemptByID(ctx, req.(*GetAssessmentAttemptByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_LocalGetAssessmentAttemptByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssessmentAttemptByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).LocalGetAssessmentAttemptByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/LocalGetAssessmentAttemptByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).LocalGetAssessmentAttemptByID(ctx, req.(*GetAssessmentAttemptByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_UpdateAssessmentAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssessmentAttemptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).UpdateAssessmentAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/UpdateAssessmentAttempt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).UpdateAssessmentAttempt(ctx, req.(*UpdateAssessmentAttemptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_LocalUpdateAssessmentAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssessmentAttemptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).LocalUpdateAssessmentAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/LocalUpdateAssessmentAttempt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).LocalUpdateAssessmentAttempt(ctx, req.(*UpdateAssessmentAttemptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_DeleteAssessmentAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssessmentAttemptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).DeleteAssessmentAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/DeleteAssessmentAttempt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).DeleteAssessmentAttempt(ctx, req.(*DeleteAssessmentAttemptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/CreateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_BulkCreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).BulkCreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/BulkCreateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).BulkCreateQuestion(ctx, req.(*BulkCreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_GetAllQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).GetAllQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/GetAllQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).GetAllQuestions(ctx, req.(*GetAllQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_GetQuestionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).GetQuestionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/GetQuestionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).GetQuestionByID(ctx, req.(*GetQuestionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/UpdateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/DeleteQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_UpdateAttemptQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttemptQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).UpdateAttemptQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AssessmentService/UpdateAttemptQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).UpdateAttemptQuestion(ctx, req.(*UpdateAttemptQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AssessmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AssessmentService",
	HandlerType: (*AssessmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAssessment",
			Handler:    _AssessmentService_CreateAssessment_Handler,
		},
		{
			MethodName: "GetAllAssessments",
			Handler:    _AssessmentService_GetAllAssessments_Handler,
		},
		{
			MethodName: "GetAssessmentByID",
			Handler:    _AssessmentService_GetAssessmentByID_Handler,
		},
		{
			MethodName: "UpdateAssessment",
			Handler:    _AssessmentService_UpdateAssessment_Handler,
		},
		{
			MethodName: "DeleteAssessment",
			Handler:    _AssessmentService_DeleteAssessment_Handler,
		},
		{
			MethodName: "CreateAssessmentAttempt",
			Handler:    _AssessmentService_CreateAssessmentAttempt_Handler,
		},
		{
			MethodName: "GetAssessmentAttemptByID",
			Handler:    _AssessmentService_GetAssessmentAttemptByID_Handler,
		},
		{
			MethodName: "LocalGetAssessmentAttemptByID",
			Handler:    _AssessmentService_LocalGetAssessmentAttemptByID_Handler,
		},
		{
			MethodName: "UpdateAssessmentAttempt",
			Handler:    _AssessmentService_UpdateAssessmentAttempt_Handler,
		},
		{
			MethodName: "LocalUpdateAssessmentAttempt",
			Handler:    _AssessmentService_LocalUpdateAssessmentAttempt_Handler,
		},
		{
			MethodName: "DeleteAssessmentAttempt",
			Handler:    _AssessmentService_DeleteAssessmentAttempt_Handler,
		},
		{
			MethodName: "CreateQuestion",
			Handler:    _AssessmentService_CreateQuestion_Handler,
		},
		{
			MethodName: "BulkCreateQuestion",
			Handler:    _AssessmentService_BulkCreateQuestion_Handler,
		},
		{
			MethodName: "GetAllQuestions",
			Handler:    _AssessmentService_GetAllQuestions_Handler,
		},
		{
			MethodName: "GetQuestionByID",
			Handler:    _AssessmentService_GetQuestionByID_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _AssessmentService_UpdateQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _AssessmentService_DeleteQuestion_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _AssessmentService_CreateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _AssessmentService_DeleteTag_Handler,
		},
		{
			MethodName: "UpdateAttemptQuestion",
			Handler:    _AssessmentService_UpdateAttemptQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assessment.proto",
}
