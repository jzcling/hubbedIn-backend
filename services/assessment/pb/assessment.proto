syntax = "proto3";
package pb;

option go_package = "services/assessment/pb";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

// ------------ Assessment Service ------------

service AssessmentService {
    rpc CreateAssessment(CreateAssessmentRequest) returns (Assessment) {
        option (google.api.http) = { 
            post: "/v1/assessments" 
            body: "assessment"
        };
    };
    rpc GetAllAssessments(GetAllAssessmentsRequest) returns (GetAllAssessmentsResponse) {
        option (google.api.http) = { get: "/v1/assessments" };
    };
    rpc GetAssessmentByID(GetAssessmentByIDRequest) returns (Assessment) {
        option (google.api.http) = { get: "/v1/assessments/{id}" };
    };
    rpc UpdateAssessment(UpdateAssessmentRequest) returns (Assessment) {
        option (google.api.http) = { 
            put: "/v1/assessments/{id}"
            body: "assessment"
        };
    };
    rpc DeleteAssessment(DeleteAssessmentRequest) returns (DeleteAssessmentResponse) {
        option (google.api.http) = { delete: "/v1/assessments/{id}" };
    };

    rpc CreateAssessmentStatus(CreateAssessmentStatusRequest) returns (AssessmentStatus) {
        option (google.api.http) = { 
            post: "/v1/assessmentstatuses" 
            body: "assessment_status"
        };
    };
    rpc UpdateAssessmentStatus(UpdateAssessmentStatusRequest) returns (AssessmentStatus) {
        option (google.api.http) = {
            put: "/v1/assessmentstatuses/{id}"
            body: "assessment_status"
        };
    };
    rpc DeleteAssessmentStatus(DeleteAssessmentStatusRequest) returns (DeleteAssessmentStatusResponse) {
        option (google.api.http) = { delete: "/v1/assessmentstatuses/{id}" };
    };

    rpc CreateQuestion(CreateQuestionRequest) returns (Question) {
        option (google.api.http) = { 
            post: "/v1/questions" 
            body: "question"
        };
    };
    rpc GetAllQuestions(GetAllQuestionsRequest) returns (GetAllQuestionsResponse) {
        option (google.api.http) = { get: "/v1/questions" };
    };
    rpc GetQuestionByID(GetQuestionByIDRequest) returns (Question) {
        option (google.api.http) = { get: "/v1/questions/{id}" };
    };
    rpc UpdateQuestion(UpdateQuestionRequest) returns (Question) {
        option (google.api.http) = { 
            put: "/v1/questions/{id}"
            body: "question"
        };
    };
    rpc DeleteQuestion(DeleteQuestionRequest) returns (DeleteQuestionResponse) {
        option (google.api.http) = { delete: "/v1/questions/{id}" };
    };

    rpc CreateTag(CreateTagRequest) returns (Tag) {
        option (google.api.http) = { 
            post: "/v1/tags" 
            body: "tag"
        };
    };
    rpc DeleteTag(DeleteTagRequest) returns (DeleteTagResponse) {
        option (google.api.http) = { delete: "/v1/tags/{id}" };
    };

    rpc CreateResponse(CreateResponseRequest) returns (Response) {
        option (google.api.http) = { 
            post: "/v1/responses" 
            body: "response"
        };
    };
    rpc DeleteResponse(DeleteResponseRequest) returns (DeleteResponseResponse) {
        option (google.api.http) = { delete: "/v1/responses/{id}" };
    };
} 

message Assessment {
    uint64 id = 1;
    string name = 2;
	string description = 3;
	string notes = 4;
	string image_url = 5;
	string difficulty = 6;
	uint64 time_allowed = 7;
	string type = 8;
	bool randomise = 9;
	uint32 num_questions = 10;
	repeated Question questions = 11;
	repeated AssessmentStatus candidate_statuses = 12;
}

message CreateAssessmentRequest {
    Assessment assessment = 1;
}

message GetAllAssessmentsRequest {
    repeated uint64 id = 1;
	string name = 2;
	repeated string difficulty = 3;
	repeated string type = 4;
	uint64 candidate_id = 5;
	repeated string status = 6;
	uint32 min_score = 7;
}

message GetAllAssessmentsResponse {
    repeated Assessment assessments = 1;
}

message GetAssessmentByIDRequest {
    uint64 id = 1;
}

message UpdateAssessmentRequest {
    uint64 id = 1;
    Assessment assessment = 2;
}

message DeleteAssessmentRequest {
    uint64 id = 1;
}

message DeleteAssessmentResponse {
    // Empty
}

message AssessmentStatus {
    uint64 id = 1;
    uint64 assessment_id = 2;
	uint64 candidate_id = 3;
	string status = 4;
	google.protobuf.Timestamp started_at = 5;
	google.protobuf.Timestamp completed_at = 6;
	uint32 score = 7;
}

message CreateAssessmentStatusRequest {
    AssessmentStatus assessment_status = 1;
}

message UpdateAssessmentStatusRequest {
    uint64 id = 1;
    AssessmentStatus assessment_status = 2;
}

message DeleteAssessmentStatusRequest {
    uint64 id = 1;
}

message DeleteAssessmentStatusResponse {
    // Empty
}

message Question {
    uint64 id = 1;
    uint64 created_by = 2;
	string type = 3;
	string text = 4;
	string image_url = 5;
	repeated string options = 6;
	uint32 answer = 7;
	repeated Tag tags = 8;
	repeated Assessment assessments = 9;
	repeated Response responses = 10;
}

message CreateQuestionRequest {
    Question question = 1;
}

message GetAllQuestionsRequest {
    repeated uint64 id = 1;
	repeated string tags = 2;
}

message GetAllQuestionsResponse {
    repeated Question questions = 1;
}

message GetQuestionByIDRequest {
    uint64 id = 1;
}

message UpdateQuestionRequest {
    uint64 id = 1;
    Question question = 2;
}

message DeleteQuestionRequest {
    uint64 id = 1;
}

message DeleteQuestionResponse {
    // Empty
}

message Tag {
    uint64 id = 1;
    string name = 2;
}

message CreateTagRequest {
    Tag tag = 1;
}

message DeleteTagRequest {
    uint64 id = 1;
}

message DeleteTagResponse {
    // Empty
}

message QuestionTag {
    uint64 id = 1;
    uint64 question_id = 2;
    uint64 tag_id = 3;
}

message Response {
    uint64 id = 1;
    uint64 question_id = 2;
	uint64 candidate_id = 3;
	uint32 selection = 4;
	string text = 5;
	uint32 score = 6;
	uint64 time_taken = 7;
    google.protobuf.Timestamp created_at = 8;
}

message CreateResponseRequest {
    Response response = 1;
}

message DeleteResponseRequest {
    uint64 id = 1;
}

message DeleteResponseResponse {
    // Empty
}

message AssessmentQuestion {
    uint64 id = 1;
    uint64 assessment_id = 2;
    uint64 question_id = 3;
}