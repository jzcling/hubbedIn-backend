// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "in-backend/services/assessment/models"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateAssessment provides a mock function with given fields: ctx, m
func (_m *Service) CreateAssessment(ctx context.Context, m *models.Assessment) (*models.Assessment, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Assessment
	if rf, ok := ret.Get(0).(func(context.Context, *models.Assessment) *models.Assessment); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Assessment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Assessment) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAssessmentStatus provides a mock function with given fields: ctx, m
func (_m *Service) CreateAssessmentStatus(ctx context.Context, m *models.AssessmentStatus) (*models.AssessmentStatus, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.AssessmentStatus
	if rf, ok := ret.Get(0).(func(context.Context, *models.AssessmentStatus) *models.AssessmentStatus); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AssessmentStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.AssessmentStatus) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQuestion provides a mock function with given fields: ctx, m
func (_m *Service) CreateQuestion(ctx context.Context, m *models.Question) (*models.Question, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Question
	if rf, ok := ret.Get(0).(func(context.Context, *models.Question) *models.Question); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Question) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResponse provides a mock function with given fields: ctx, m
func (_m *Service) CreateResponse(ctx context.Context, m *models.Response) (*models.Response, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Response
	if rf, ok := ret.Get(0).(func(context.Context, *models.Response) *models.Response); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Response) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTag provides a mock function with given fields: ctx, m
func (_m *Service) CreateTag(ctx context.Context, m *models.Tag) (*models.Tag, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Tag
	if rf, ok := ret.Get(0).(func(context.Context, *models.Tag) *models.Tag); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Tag) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAssessment provides a mock function with given fields: ctx, id
func (_m *Service) DeleteAssessment(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAssessmentStatus provides a mock function with given fields: ctx, id
func (_m *Service) DeleteAssessmentStatus(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteQuestion provides a mock function with given fields: ctx, id
func (_m *Service) DeleteQuestion(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteResponse provides a mock function with given fields: ctx, id
func (_m *Service) DeleteResponse(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTag provides a mock function with given fields: ctx, id
func (_m *Service) DeleteTag(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllAssessments provides a mock function with given fields: ctx, f, admin
func (_m *Service) GetAllAssessments(ctx context.Context, f models.AssessmentFilters, admin *bool) ([]*models.Assessment, error) {
	ret := _m.Called(ctx, f, admin)

	var r0 []*models.Assessment
	if rf, ok := ret.Get(0).(func(context.Context, models.AssessmentFilters, *bool) []*models.Assessment); ok {
		r0 = rf(ctx, f, admin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Assessment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.AssessmentFilters, *bool) error); ok {
		r1 = rf(ctx, f, admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllQuestions provides a mock function with given fields: ctx, f
func (_m *Service) GetAllQuestions(ctx context.Context, f models.QuestionFilters) ([]*models.Question, error) {
	ret := _m.Called(ctx, f)

	var r0 []*models.Question
	if rf, ok := ret.Get(0).(func(context.Context, models.QuestionFilters) []*models.Question); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.QuestionFilters) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssessmentByID provides a mock function with given fields: ctx, id, admin
func (_m *Service) GetAssessmentByID(ctx context.Context, id uint64, admin *bool) (*models.Assessment, error) {
	ret := _m.Called(ctx, id, admin)

	var r0 *models.Assessment
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *bool) *models.Assessment); ok {
		r0 = rf(ctx, id, admin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Assessment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, *bool) error); ok {
		r1 = rf(ctx, id, admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuestionByID provides a mock function with given fields: ctx, id
func (_m *Service) GetQuestionByID(ctx context.Context, id uint64) (*models.Question, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Question
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *models.Question); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAssessment provides a mock function with given fields: ctx, m
func (_m *Service) UpdateAssessment(ctx context.Context, m *models.Assessment) (*models.Assessment, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Assessment
	if rf, ok := ret.Get(0).(func(context.Context, *models.Assessment) *models.Assessment); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Assessment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Assessment) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAssessmentStatus provides a mock function with given fields: ctx, m
func (_m *Service) UpdateAssessmentStatus(ctx context.Context, m *models.AssessmentStatus) (*models.AssessmentStatus, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.AssessmentStatus
	if rf, ok := ret.Get(0).(func(context.Context, *models.AssessmentStatus) *models.AssessmentStatus); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AssessmentStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.AssessmentStatus) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQuestion provides a mock function with given fields: ctx, m
func (_m *Service) UpdateQuestion(ctx context.Context, m *models.Question) (*models.Question, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Question
	if rf, ok := ret.Get(0).(func(context.Context, *models.Question) *models.Question); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Question) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
