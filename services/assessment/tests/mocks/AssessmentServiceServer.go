// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	pb "in-backend/services/assessment/pb"

	mock "github.com/stretchr/testify/mock"
)

// AssessmentServiceServer is an autogenerated mock type for the AssessmentServiceServer type
type AssessmentServiceServer struct {
	mock.Mock
}

// CreateAssessment provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) CreateAssessment(_a0 context.Context, _a1 *pb.CreateAssessmentRequest) (*pb.Assessment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.Assessment
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateAssessmentRequest) *pb.Assessment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Assessment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateAssessmentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAssessmentAttempt provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) CreateAssessmentAttempt(_a0 context.Context, _a1 *pb.CreateAssessmentAttemptRequest) (*pb.AssessmentAttempt, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.AssessmentAttempt
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateAssessmentAttemptRequest) *pb.AssessmentAttempt); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AssessmentAttempt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateAssessmentAttemptRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQuestion provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) CreateQuestion(_a0 context.Context, _a1 *pb.CreateQuestionRequest) (*pb.Question, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.Question
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateQuestionRequest) *pb.Question); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateQuestionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResponse provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) CreateResponse(_a0 context.Context, _a1 *pb.CreateResponseRequest) (*pb.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.Response
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateResponseRequest) *pb.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateResponseRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTag provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) CreateTag(_a0 context.Context, _a1 *pb.CreateTagRequest) (*pb.Tag, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.Tag
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateTagRequest) *pb.Tag); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateTagRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAssessment provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) DeleteAssessment(_a0 context.Context, _a1 *pb.DeleteAssessmentRequest) (*pb.DeleteAssessmentResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.DeleteAssessmentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteAssessmentRequest) *pb.DeleteAssessmentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteAssessmentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteAssessmentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAssessmentAttempt provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) DeleteAssessmentAttempt(_a0 context.Context, _a1 *pb.DeleteAssessmentAttemptRequest) (*pb.DeleteAssessmentAttemptResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.DeleteAssessmentAttemptResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteAssessmentAttemptRequest) *pb.DeleteAssessmentAttemptResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteAssessmentAttemptResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteAssessmentAttemptRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQuestion provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) DeleteQuestion(_a0 context.Context, _a1 *pb.DeleteQuestionRequest) (*pb.DeleteQuestionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.DeleteQuestionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteQuestionRequest) *pb.DeleteQuestionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteQuestionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteQuestionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResponse provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) DeleteResponse(_a0 context.Context, _a1 *pb.DeleteResponseRequest) (*pb.DeleteResponseResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.DeleteResponseResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteResponseRequest) *pb.DeleteResponseResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteResponseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteResponseRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTag provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) DeleteTag(_a0 context.Context, _a1 *pb.DeleteTagRequest) (*pb.DeleteTagResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.DeleteTagResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteTagRequest) *pb.DeleteTagResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteTagResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteTagRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAssessments provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) GetAllAssessments(_a0 context.Context, _a1 *pb.GetAllAssessmentsRequest) (*pb.GetAllAssessmentsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetAllAssessmentsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllAssessmentsRequest) *pb.GetAllAssessmentsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllAssessmentsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllAssessmentsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllQuestions provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) GetAllQuestions(_a0 context.Context, _a1 *pb.GetAllQuestionsRequest) (*pb.GetAllQuestionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetAllQuestionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllQuestionsRequest) *pb.GetAllQuestionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllQuestionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllQuestionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssessmentByID provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) GetAssessmentByID(_a0 context.Context, _a1 *pb.GetAssessmentByIDRequest) (*pb.Assessment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.Assessment
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAssessmentByIDRequest) *pb.Assessment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Assessment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAssessmentByIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuestionByID provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) GetQuestionByID(_a0 context.Context, _a1 *pb.GetQuestionByIDRequest) (*pb.Question, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.Question
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetQuestionByIDRequest) *pb.Question); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetQuestionByIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAssessment provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) UpdateAssessment(_a0 context.Context, _a1 *pb.UpdateAssessmentRequest) (*pb.Assessment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.Assessment
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateAssessmentRequest) *pb.Assessment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Assessment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateAssessmentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAssessmentAttempt provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) UpdateAssessmentAttempt(_a0 context.Context, _a1 *pb.UpdateAssessmentAttemptRequest) (*pb.AssessmentAttempt, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.AssessmentAttempt
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateAssessmentAttemptRequest) *pb.AssessmentAttempt); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AssessmentAttempt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateAssessmentAttemptRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQuestion provides a mock function with given fields: _a0, _a1
func (_m *AssessmentServiceServer) UpdateQuestion(_a0 context.Context, _a1 *pb.UpdateQuestionRequest) (*pb.Question, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.Question
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateQuestionRequest) *pb.Question); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateQuestionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
