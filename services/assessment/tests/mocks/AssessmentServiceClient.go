// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "in-backend/services/assessment/pb"
)

// AssessmentServiceClient is an autogenerated mock type for the AssessmentServiceClient type
type AssessmentServiceClient struct {
	mock.Mock
}

// CreateAssessment provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) CreateAssessment(ctx context.Context, in *pb.CreateAssessmentRequest, opts ...grpc.CallOption) (*pb.Assessment, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Assessment
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateAssessmentRequest, ...grpc.CallOption) *pb.Assessment); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Assessment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateAssessmentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAssessmentStatus provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) CreateAssessmentStatus(ctx context.Context, in *pb.CreateAssessmentStatusRequest, opts ...grpc.CallOption) (*pb.AssessmentStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.AssessmentStatus
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateAssessmentStatusRequest, ...grpc.CallOption) *pb.AssessmentStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AssessmentStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateAssessmentStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQuestion provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) CreateQuestion(ctx context.Context, in *pb.CreateQuestionRequest, opts ...grpc.CallOption) (*pb.Question, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Question
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateQuestionRequest, ...grpc.CallOption) *pb.Question); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateQuestionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResponse provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) CreateResponse(ctx context.Context, in *pb.CreateResponseRequest, opts ...grpc.CallOption) (*pb.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Response
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateResponseRequest, ...grpc.CallOption) *pb.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateResponseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTag provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) CreateTag(ctx context.Context, in *pb.CreateTagRequest, opts ...grpc.CallOption) (*pb.Tag, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Tag
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateTagRequest, ...grpc.CallOption) *pb.Tag); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateTagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAssessment provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) DeleteAssessment(ctx context.Context, in *pb.DeleteAssessmentRequest, opts ...grpc.CallOption) (*pb.DeleteAssessmentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteAssessmentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteAssessmentRequest, ...grpc.CallOption) *pb.DeleteAssessmentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteAssessmentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteAssessmentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAssessmentStatus provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) DeleteAssessmentStatus(ctx context.Context, in *pb.DeleteAssessmentStatusRequest, opts ...grpc.CallOption) (*pb.DeleteAssessmentStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteAssessmentStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteAssessmentStatusRequest, ...grpc.CallOption) *pb.DeleteAssessmentStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteAssessmentStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteAssessmentStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQuestion provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) DeleteQuestion(ctx context.Context, in *pb.DeleteQuestionRequest, opts ...grpc.CallOption) (*pb.DeleteQuestionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteQuestionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteQuestionRequest, ...grpc.CallOption) *pb.DeleteQuestionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteQuestionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteQuestionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResponse provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) DeleteResponse(ctx context.Context, in *pb.DeleteResponseRequest, opts ...grpc.CallOption) (*pb.DeleteResponseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteResponseResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteResponseRequest, ...grpc.CallOption) *pb.DeleteResponseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteResponseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteResponseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTag provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) DeleteTag(ctx context.Context, in *pb.DeleteTagRequest, opts ...grpc.CallOption) (*pb.DeleteTagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteTagResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteTagRequest, ...grpc.CallOption) *pb.DeleteTagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteTagResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteTagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAssessments provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) GetAllAssessments(ctx context.Context, in *pb.GetAllAssessmentsRequest, opts ...grpc.CallOption) (*pb.GetAllAssessmentsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllAssessmentsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllAssessmentsRequest, ...grpc.CallOption) *pb.GetAllAssessmentsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllAssessmentsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllAssessmentsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllQuestions provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) GetAllQuestions(ctx context.Context, in *pb.GetAllQuestionsRequest, opts ...grpc.CallOption) (*pb.GetAllQuestionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllQuestionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllQuestionsRequest, ...grpc.CallOption) *pb.GetAllQuestionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllQuestionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllQuestionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssessmentByID provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) GetAssessmentByID(ctx context.Context, in *pb.GetAssessmentByIDRequest, opts ...grpc.CallOption) (*pb.Assessment, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Assessment
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAssessmentByIDRequest, ...grpc.CallOption) *pb.Assessment); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Assessment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAssessmentByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuestionByID provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) GetQuestionByID(ctx context.Context, in *pb.GetQuestionByIDRequest, opts ...grpc.CallOption) (*pb.Question, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Question
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetQuestionByIDRequest, ...grpc.CallOption) *pb.Question); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetQuestionByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAssessment provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) UpdateAssessment(ctx context.Context, in *pb.UpdateAssessmentRequest, opts ...grpc.CallOption) (*pb.Assessment, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Assessment
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateAssessmentRequest, ...grpc.CallOption) *pb.Assessment); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Assessment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateAssessmentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAssessmentStatus provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) UpdateAssessmentStatus(ctx context.Context, in *pb.UpdateAssessmentStatusRequest, opts ...grpc.CallOption) (*pb.AssessmentStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.AssessmentStatus
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateAssessmentStatusRequest, ...grpc.CallOption) *pb.AssessmentStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AssessmentStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateAssessmentStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQuestion provides a mock function with given fields: ctx, in, opts
func (_m *AssessmentServiceClient) UpdateQuestion(ctx context.Context, in *pb.UpdateQuestionRequest, opts ...grpc.CallOption) (*pb.Question, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Question
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateQuestionRequest, ...grpc.CallOption) *pb.Question); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateQuestionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
