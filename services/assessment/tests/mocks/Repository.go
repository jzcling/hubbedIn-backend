// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "in-backend/services/assessment/models"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateAssessment provides a mock function with given fields: ctx, m
func (_m *Repository) CreateAssessment(ctx context.Context, m *models.Assessment) (*models.Assessment, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Assessment
	if rf, ok := ret.Get(0).(func(context.Context, *models.Assessment) *models.Assessment); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Assessment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Assessment) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAssessmentAttempt provides a mock function with given fields: ctx, m
func (_m *Repository) CreateAssessmentAttempt(ctx context.Context, m *models.AssessmentAttempt) (*models.AssessmentAttempt, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.AssessmentAttempt
	if rf, ok := ret.Get(0).(func(context.Context, *models.AssessmentAttempt) *models.AssessmentAttempt); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AssessmentAttempt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.AssessmentAttempt) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQuestion provides a mock function with given fields: ctx, m
func (_m *Repository) CreateQuestion(ctx context.Context, m *models.Question) (*models.Question, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Question
	if rf, ok := ret.Get(0).(func(context.Context, *models.Question) *models.Question); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Question) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTag provides a mock function with given fields: ctx, m
func (_m *Repository) CreateTag(ctx context.Context, m *models.Tag) (*models.Tag, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Tag
	if rf, ok := ret.Get(0).(func(context.Context, *models.Tag) *models.Tag); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Tag) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAssessment provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteAssessment(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAssessmentAttempt provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteAssessmentAttempt(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteQuestion provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteQuestion(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTag provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteTag(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllAssessments provides a mock function with given fields: ctx, f, admin
func (_m *Repository) GetAllAssessments(ctx context.Context, f models.AssessmentFilters, admin *bool) ([]*models.Assessment, error) {
	ret := _m.Called(ctx, f, admin)

	var r0 []*models.Assessment
	if rf, ok := ret.Get(0).(func(context.Context, models.AssessmentFilters, *bool) []*models.Assessment); ok {
		r0 = rf(ctx, f, admin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Assessment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.AssessmentFilters, *bool) error); ok {
		r1 = rf(ctx, f, admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllQuestions provides a mock function with given fields: ctx, f
func (_m *Repository) GetAllQuestions(ctx context.Context, f models.QuestionFilters) ([]*models.Question, error) {
	ret := _m.Called(ctx, f)

	var r0 []*models.Question
	if rf, ok := ret.Get(0).(func(context.Context, models.QuestionFilters) []*models.Question); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.QuestionFilters) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssessmentByID provides a mock function with given fields: ctx, id, admin
func (_m *Repository) GetAssessmentByID(ctx context.Context, id uint64, admin *bool) (*models.Assessment, error) {
	ret := _m.Called(ctx, id, admin)

	var r0 *models.Assessment
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *bool) *models.Assessment); ok {
		r0 = rf(ctx, id, admin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Assessment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, *bool) error); ok {
		r1 = rf(ctx, id, admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuestionByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetQuestionByID(ctx context.Context, id uint64) (*models.Question, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Question
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *models.Question); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAssessment provides a mock function with given fields: ctx, m
func (_m *Repository) UpdateAssessment(ctx context.Context, m *models.Assessment) (*models.Assessment, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Assessment
	if rf, ok := ret.Get(0).(func(context.Context, *models.Assessment) *models.Assessment); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Assessment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Assessment) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAssessmentAttempt provides a mock function with given fields: ctx, m
func (_m *Repository) UpdateAssessmentAttempt(ctx context.Context, m *models.AssessmentAttempt) (*models.AssessmentAttempt, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.AssessmentAttempt
	if rf, ok := ret.Get(0).(func(context.Context, *models.AssessmentAttempt) *models.AssessmentAttempt); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AssessmentAttempt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.AssessmentAttempt) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAttemptQuestion provides a mock function with given fields: ctx, m
func (_m *Repository) UpdateAttemptQuestion(ctx context.Context, m *models.AttemptQuestion) (*models.AttemptQuestion, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.AttemptQuestion
	if rf, ok := ret.Get(0).(func(context.Context, *models.AttemptQuestion) *models.AttemptQuestion); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AttemptQuestion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.AttemptQuestion) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQuestion provides a mock function with given fields: ctx, m
func (_m *Repository) UpdateQuestion(ctx context.Context, m *models.Question) (*models.Question, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Question
	if rf, ok := ret.Get(0).(func(context.Context, *models.Question) *models.Question); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Question) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
