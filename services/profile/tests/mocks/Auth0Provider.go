// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "in-backend/services/profile/models"

	mock "github.com/stretchr/testify/mock"
)

// Auth0Provider is an autogenerated mock type for the Auth0Provider type
type Auth0Provider struct {
	mock.Mock
}

// GetToken provides a mock function with given fields:
func (_m *Auth0Provider) GetToken() (map[string]interface{}, error) {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserRole provides a mock function with given fields: token, authID, roles
func (_m *Auth0Provider) SetUserRole(token string, authID string, roles []string) error {
	ret := _m.Called(token, authID, roles)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string) error); ok {
		r0 = rf(token, authID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: token, u
func (_m *Auth0Provider) UpdateUser(token string, u *models.User) error {
	ret := _m.Called(token, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *models.User) error); ok {
		r0 = rf(token, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
