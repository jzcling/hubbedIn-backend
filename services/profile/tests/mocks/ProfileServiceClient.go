// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "in-backend/services/profile/pb"
)

// ProfileServiceClient is an autogenerated mock type for the ProfileServiceClient type
type ProfileServiceClient struct {
	mock.Mock
}

// CreateAcademicHistory provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) CreateAcademicHistory(ctx context.Context, in *pb.CreateAcademicHistoryRequest, opts ...grpc.CallOption) (*pb.AcademicHistory, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.AcademicHistory
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateAcademicHistoryRequest, ...grpc.CallOption) *pb.AcademicHistory); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AcademicHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateAcademicHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCandidate provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) CreateCandidate(ctx context.Context, in *pb.CreateCandidateRequest, opts ...grpc.CallOption) (*pb.Candidate, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Candidate
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateCandidateRequest, ...grpc.CallOption) *pb.Candidate); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Candidate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateCandidateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCompany provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) CreateCompany(ctx context.Context, in *pb.CreateCompanyRequest, opts ...grpc.CallOption) (*pb.Company, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Company
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateCompanyRequest, ...grpc.CallOption) *pb.Company); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateCompanyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCourse provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) CreateCourse(ctx context.Context, in *pb.CreateCourseRequest, opts ...grpc.CallOption) (*pb.Course, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Course
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateCourseRequest, ...grpc.CallOption) *pb.Course); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Course)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateCourseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDepartment provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) CreateDepartment(ctx context.Context, in *pb.CreateDepartmentRequest, opts ...grpc.CallOption) (*pb.Department, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Department
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateDepartmentRequest, ...grpc.CallOption) *pb.Department); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Department)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateDepartmentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstitution provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) CreateInstitution(ctx context.Context, in *pb.CreateInstitutionRequest, opts ...grpc.CallOption) (*pb.Institution, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Institution
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateInstitutionRequest, ...grpc.CallOption) *pb.Institution); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Institution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateInstitutionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobHistory provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) CreateJobHistory(ctx context.Context, in *pb.CreateJobHistoryRequest, opts ...grpc.CallOption) (*pb.JobHistory, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.JobHistory
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateJobHistoryRequest, ...grpc.CallOption) *pb.JobHistory); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.JobHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateJobHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSkill provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) CreateSkill(ctx context.Context, in *pb.CreateSkillRequest, opts ...grpc.CallOption) (*pb.Skill, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Skill
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateSkillRequest, ...grpc.CallOption) *pb.Skill); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Skill)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateSkillRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserSkill provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) CreateUserSkill(ctx context.Context, in *pb.CreateUserSkillRequest, opts ...grpc.CallOption) (*pb.UserSkill, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.UserSkill
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateUserSkillRequest, ...grpc.CallOption) *pb.UserSkill); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UserSkill)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateUserSkillRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAcademicHistory provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) DeleteAcademicHistory(ctx context.Context, in *pb.DeleteAcademicHistoryRequest, opts ...grpc.CallOption) (*pb.DeleteAcademicHistoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteAcademicHistoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteAcademicHistoryRequest, ...grpc.CallOption) *pb.DeleteAcademicHistoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteAcademicHistoryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteAcademicHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCandidate provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) DeleteCandidate(ctx context.Context, in *pb.DeleteCandidateRequest, opts ...grpc.CallOption) (*pb.DeleteCandidateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteCandidateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteCandidateRequest, ...grpc.CallOption) *pb.DeleteCandidateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteCandidateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteCandidateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJobHistory provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) DeleteJobHistory(ctx context.Context, in *pb.DeleteJobHistoryRequest, opts ...grpc.CallOption) (*pb.DeleteJobHistoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteJobHistoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteJobHistoryRequest, ...grpc.CallOption) *pb.DeleteJobHistoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteJobHistoryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteJobHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserSkill provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) DeleteUserSkill(ctx context.Context, in *pb.DeleteUserSkillRequest, opts ...grpc.CallOption) (*pb.DeleteUserSkillResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteUserSkillResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteUserSkillRequest, ...grpc.CallOption) *pb.DeleteUserSkillResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteUserSkillResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteUserSkillRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAcademicHistory provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetAcademicHistory(ctx context.Context, in *pb.GetAcademicHistoryRequest, opts ...grpc.CallOption) (*pb.AcademicHistory, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.AcademicHistory
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAcademicHistoryRequest, ...grpc.CallOption) *pb.AcademicHistory); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AcademicHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAcademicHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCandidates provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetAllCandidates(ctx context.Context, in *pb.GetAllCandidatesRequest, opts ...grpc.CallOption) (*pb.GetAllCandidatesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllCandidatesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllCandidatesRequest, ...grpc.CallOption) *pb.GetAllCandidatesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllCandidatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllCandidatesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCompanies provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetAllCompanies(ctx context.Context, in *pb.GetAllCompaniesRequest, opts ...grpc.CallOption) (*pb.GetAllCompaniesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllCompaniesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllCompaniesRequest, ...grpc.CallOption) *pb.GetAllCompaniesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllCompaniesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllCompaniesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCourses provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetAllCourses(ctx context.Context, in *pb.GetAllCoursesRequest, opts ...grpc.CallOption) (*pb.GetAllCoursesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllCoursesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllCoursesRequest, ...grpc.CallOption) *pb.GetAllCoursesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllCoursesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllCoursesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDepartments provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetAllDepartments(ctx context.Context, in *pb.GetAllDepartmentsRequest, opts ...grpc.CallOption) (*pb.GetAllDepartmentsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllDepartmentsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllDepartmentsRequest, ...grpc.CallOption) *pb.GetAllDepartmentsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllDepartmentsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllDepartmentsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllInstitutions provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetAllInstitutions(ctx context.Context, in *pb.GetAllInstitutionsRequest, opts ...grpc.CallOption) (*pb.GetAllInstitutionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllInstitutionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllInstitutionsRequest, ...grpc.CallOption) *pb.GetAllInstitutionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllInstitutionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllInstitutionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSkills provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetAllSkills(ctx context.Context, in *pb.GetAllSkillsRequest, opts ...grpc.CallOption) (*pb.GetAllSkillsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllSkillsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllSkillsRequest, ...grpc.CallOption) *pb.GetAllSkillsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllSkillsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllSkillsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCandidateByID provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetCandidateByID(ctx context.Context, in *pb.GetCandidateByIDRequest, opts ...grpc.CallOption) (*pb.Candidate, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Candidate
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetCandidateByIDRequest, ...grpc.CallOption) *pb.Candidate); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Candidate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetCandidateByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompany provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetCompany(ctx context.Context, in *pb.GetCompanyRequest, opts ...grpc.CallOption) (*pb.Company, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Company
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetCompanyRequest, ...grpc.CallOption) *pb.Company); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetCompanyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourse provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetCourse(ctx context.Context, in *pb.GetCourseRequest, opts ...grpc.CallOption) (*pb.Course, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Course
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetCourseRequest, ...grpc.CallOption) *pb.Course); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Course)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetCourseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDepartment provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetDepartment(ctx context.Context, in *pb.GetDepartmentRequest, opts ...grpc.CallOption) (*pb.Department, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Department
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetDepartmentRequest, ...grpc.CallOption) *pb.Department); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Department)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetDepartmentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstitution provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetInstitution(ctx context.Context, in *pb.GetInstitutionRequest, opts ...grpc.CallOption) (*pb.Institution, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Institution
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetInstitutionRequest, ...grpc.CallOption) *pb.Institution); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Institution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetInstitutionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobHistory provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetJobHistory(ctx context.Context, in *pb.GetJobHistoryRequest, opts ...grpc.CallOption) (*pb.JobHistory, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.JobHistory
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetJobHistoryRequest, ...grpc.CallOption) *pb.JobHistory); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.JobHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetJobHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSkill provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) GetSkill(ctx context.Context, in *pb.GetSkillRequest, opts ...grpc.CallOption) (*pb.Skill, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Skill
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetSkillRequest, ...grpc.CallOption) *pb.Skill); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Skill)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetSkillRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAcademicHistory provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) UpdateAcademicHistory(ctx context.Context, in *pb.UpdateAcademicHistoryRequest, opts ...grpc.CallOption) (*pb.AcademicHistory, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.AcademicHistory
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateAcademicHistoryRequest, ...grpc.CallOption) *pb.AcademicHistory); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AcademicHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateAcademicHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCandidate provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) UpdateCandidate(ctx context.Context, in *pb.UpdateCandidateRequest, opts ...grpc.CallOption) (*pb.Candidate, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Candidate
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateCandidateRequest, ...grpc.CallOption) *pb.Candidate); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Candidate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateCandidateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobHistory provides a mock function with given fields: ctx, in, opts
func (_m *ProfileServiceClient) UpdateJobHistory(ctx context.Context, in *pb.UpdateJobHistoryRequest, opts ...grpc.CallOption) (*pb.JobHistory, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.JobHistory
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateJobHistoryRequest, ...grpc.CallOption) *pb.JobHistory); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.JobHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateJobHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
