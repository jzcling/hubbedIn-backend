// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "in-backend/services/project/pb"
)

// ProjectServiceClient is an autogenerated mock type for the ProjectServiceClient type
type ProjectServiceClient struct {
	mock.Mock
}

// CreateCandidateProject provides a mock function with given fields: ctx, in, opts
func (_m *ProjectServiceClient) CreateCandidateProject(ctx context.Context, in *pb.CreateCandidateProjectRequest, opts ...grpc.CallOption) (*pb.CreateCandidateProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.CreateCandidateProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateCandidateProjectRequest, ...grpc.CallOption) *pb.CreateCandidateProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.CreateCandidateProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateCandidateProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: ctx, in, opts
func (_m *ProjectServiceClient) CreateProject(ctx context.Context, in *pb.CreateProjectRequest, opts ...grpc.CallOption) (*pb.Project, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Project
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateProjectRequest, ...grpc.CallOption) *pb.Project); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRating provides a mock function with given fields: ctx, in, opts
func (_m *ProjectServiceClient) CreateRating(ctx context.Context, in *pb.CreateRatingRequest, opts ...grpc.CallOption) (*pb.CreateRatingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.CreateRatingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateRatingRequest, ...grpc.CallOption) *pb.CreateRatingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.CreateRatingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateRatingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCandidateProject provides a mock function with given fields: ctx, in, opts
func (_m *ProjectServiceClient) DeleteCandidateProject(ctx context.Context, in *pb.DeleteCandidateProjectRequest, opts ...grpc.CallOption) (*pb.DeleteCandidateProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteCandidateProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteCandidateProjectRequest, ...grpc.CallOption) *pb.DeleteCandidateProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteCandidateProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteCandidateProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: ctx, in, opts
func (_m *ProjectServiceClient) DeleteProject(ctx context.Context, in *pb.DeleteProjectRequest, opts ...grpc.CallOption) (*pb.DeleteProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteProjectRequest, ...grpc.CallOption) *pb.DeleteProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRating provides a mock function with given fields: ctx, in, opts
func (_m *ProjectServiceClient) DeleteRating(ctx context.Context, in *pb.DeleteRatingRequest, opts ...grpc.CallOption) (*pb.DeleteRatingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteRatingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteRatingRequest, ...grpc.CallOption) *pb.DeleteRatingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteRatingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteRatingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllProjects provides a mock function with given fields: ctx, in, opts
func (_m *ProjectServiceClient) GetAllProjects(ctx context.Context, in *pb.GetAllProjectsRequest, opts ...grpc.CallOption) (*pb.GetAllProjectsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllProjectsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllProjectsRequest, ...grpc.CallOption) *pb.GetAllProjectsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllProjectsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllProjectsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectByID provides a mock function with given fields: ctx, in, opts
func (_m *ProjectServiceClient) GetProjectByID(ctx context.Context, in *pb.GetProjectByIDRequest, opts ...grpc.CallOption) (*pb.Project, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Project
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetProjectByIDRequest, ...grpc.CallOption) *pb.Project); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetProjectByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanProject provides a mock function with given fields: ctx, in, opts
func (_m *ProjectServiceClient) ScanProject(ctx context.Context, in *pb.ScanProjectRequest, opts ...grpc.CallOption) (*pb.ScanProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.ScanProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ScanProjectRequest, ...grpc.CallOption) *pb.ScanProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ScanProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.ScanProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProject provides a mock function with given fields: ctx, in, opts
func (_m *ProjectServiceClient) UpdateProject(ctx context.Context, in *pb.UpdateProjectRequest, opts ...grpc.CallOption) (*pb.Project, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Project
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateProjectRequest, ...grpc.CallOption) *pb.Project); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
