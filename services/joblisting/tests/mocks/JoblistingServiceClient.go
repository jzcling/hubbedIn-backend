// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "in-backend/services/joblisting/pb"
)

// JoblistingServiceClient is an autogenerated mock type for the JoblistingServiceClient type
type JoblistingServiceClient struct {
	mock.Mock
}

// BulkCreateJobPost provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) BulkCreateJobPost(ctx context.Context, in *pb.BulkCreateJobPostRequest, opts ...grpc.CallOption) (*pb.BulkCreateJobPostResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.BulkCreateJobPostResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.BulkCreateJobPostRequest, ...grpc.CallOption) *pb.BulkCreateJobPostResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.BulkCreateJobPostResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.BulkCreateJobPostRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BulkCreateKeyPerson provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) BulkCreateKeyPerson(ctx context.Context, in *pb.BulkCreateKeyPersonRequest, opts ...grpc.CallOption) (*pb.BulkCreateKeyPersonResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.BulkCreateKeyPersonResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.BulkCreateKeyPersonRequest, ...grpc.CallOption) *pb.BulkCreateKeyPersonResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.BulkCreateKeyPersonResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.BulkCreateKeyPersonRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCompany provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) CreateCompany(ctx context.Context, in *pb.CreateJobCompanyRequest, opts ...grpc.CallOption) (*pb.JobCompany, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.JobCompany
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateJobCompanyRequest, ...grpc.CallOption) *pb.JobCompany); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.JobCompany)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateJobCompanyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndustry provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) CreateIndustry(ctx context.Context, in *pb.CreateIndustryRequest, opts ...grpc.CallOption) (*pb.Industry, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Industry
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateIndustryRequest, ...grpc.CallOption) *pb.Industry); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Industry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateIndustryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobFunction provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) CreateJobFunction(ctx context.Context, in *pb.CreateJobFunctionRequest, opts ...grpc.CallOption) (*pb.JobFunction, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.JobFunction
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateJobFunctionRequest, ...grpc.CallOption) *pb.JobFunction); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.JobFunction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateJobFunctionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobPlatform provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) CreateJobPlatform(ctx context.Context, in *pb.CreateJobPlatformRequest, opts ...grpc.CallOption) (*pb.JobPlatform, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.JobPlatform
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateJobPlatformRequest, ...grpc.CallOption) *pb.JobPlatform); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.JobPlatform)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateJobPlatformRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobPost provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) CreateJobPost(ctx context.Context, in *pb.CreateJobPostRequest, opts ...grpc.CallOption) (*pb.JobPost, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.JobPost
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateJobPostRequest, ...grpc.CallOption) *pb.JobPost); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.JobPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateJobPostRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeyPerson provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) CreateKeyPerson(ctx context.Context, in *pb.CreateKeyPersonRequest, opts ...grpc.CallOption) (*pb.KeyPerson, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.KeyPerson
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateKeyPersonRequest, ...grpc.CallOption) *pb.KeyPerson); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.KeyPerson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateKeyPersonRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCompany provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) DeleteCompany(ctx context.Context, in *pb.DeleteJobCompanyRequest, opts ...grpc.CallOption) (*pb.DeleteJobCompanyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteJobCompanyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteJobCompanyRequest, ...grpc.CallOption) *pb.DeleteJobCompanyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteJobCompanyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteJobCompanyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIndustry provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) DeleteIndustry(ctx context.Context, in *pb.DeleteIndustryRequest, opts ...grpc.CallOption) (*pb.DeleteIndustryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteIndustryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteIndustryRequest, ...grpc.CallOption) *pb.DeleteIndustryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteIndustryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteIndustryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJobFunction provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) DeleteJobFunction(ctx context.Context, in *pb.DeleteJobFunctionRequest, opts ...grpc.CallOption) (*pb.DeleteJobFunctionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteJobFunctionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteJobFunctionRequest, ...grpc.CallOption) *pb.DeleteJobFunctionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteJobFunctionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteJobFunctionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJobPlatform provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) DeleteJobPlatform(ctx context.Context, in *pb.DeleteJobPlatformRequest, opts ...grpc.CallOption) (*pb.DeleteJobPlatformResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteJobPlatformResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteJobPlatformRequest, ...grpc.CallOption) *pb.DeleteJobPlatformResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteJobPlatformResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteJobPlatformRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJobPost provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) DeleteJobPost(ctx context.Context, in *pb.DeleteJobPostRequest, opts ...grpc.CallOption) (*pb.DeleteJobPostResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteJobPostResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteJobPostRequest, ...grpc.CallOption) *pb.DeleteJobPostResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteJobPostResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteJobPostRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKeyPerson provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) DeleteKeyPerson(ctx context.Context, in *pb.DeleteKeyPersonRequest, opts ...grpc.CallOption) (*pb.DeleteKeyPersonResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.DeleteKeyPersonResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteKeyPersonRequest, ...grpc.CallOption) *pb.DeleteKeyPersonResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteKeyPersonResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteKeyPersonRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCompanies provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) GetAllCompanies(ctx context.Context, in *pb.GetAllJobCompaniesRequest, opts ...grpc.CallOption) (*pb.GetAllJobCompaniesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllJobCompaniesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllJobCompaniesRequest, ...grpc.CallOption) *pb.GetAllJobCompaniesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllJobCompaniesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllJobCompaniesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllIndustries provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) GetAllIndustries(ctx context.Context, in *pb.GetAllIndustriesRequest, opts ...grpc.CallOption) (*pb.GetAllIndustriesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllIndustriesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllIndustriesRequest, ...grpc.CallOption) *pb.GetAllIndustriesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllIndustriesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllIndustriesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllJobFunctions provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) GetAllJobFunctions(ctx context.Context, in *pb.GetAllJobFunctionsRequest, opts ...grpc.CallOption) (*pb.GetAllJobFunctionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllJobFunctionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllJobFunctionsRequest, ...grpc.CallOption) *pb.GetAllJobFunctionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllJobFunctionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllJobFunctionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllJobPlatforms provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) GetAllJobPlatforms(ctx context.Context, in *pb.GetAllJobPlatformsRequest, opts ...grpc.CallOption) (*pb.GetAllJobPlatformsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllJobPlatformsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllJobPlatformsRequest, ...grpc.CallOption) *pb.GetAllJobPlatformsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllJobPlatformsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllJobPlatformsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllJobPosts provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) GetAllJobPosts(ctx context.Context, in *pb.GetAllJobPostsRequest, opts ...grpc.CallOption) (*pb.GetAllJobPostsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllJobPostsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllJobPostsRequest, ...grpc.CallOption) *pb.GetAllJobPostsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllJobPostsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllJobPostsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllKeyPersons provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) GetAllKeyPersons(ctx context.Context, in *pb.GetAllKeyPersonsRequest, opts ...grpc.CallOption) (*pb.GetAllKeyPersonsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetAllKeyPersonsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllKeyPersonsRequest, ...grpc.CallOption) *pb.GetAllKeyPersonsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllKeyPersonsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllKeyPersonsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobPostByID provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) GetJobPostByID(ctx context.Context, in *pb.GetJobPostByIDRequest, opts ...grpc.CallOption) (*pb.JobPost, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.JobPost
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetJobPostByIDRequest, ...grpc.CallOption) *pb.JobPost); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.JobPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetJobPostByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyPersonByID provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) GetKeyPersonByID(ctx context.Context, in *pb.GetKeyPersonByIDRequest, opts ...grpc.CallOption) (*pb.KeyPerson, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.KeyPerson
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetKeyPersonByIDRequest, ...grpc.CallOption) *pb.KeyPerson); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.KeyPerson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetKeyPersonByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LocalCreateCompany provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) LocalCreateCompany(ctx context.Context, in *pb.CreateJobCompanyRequest, opts ...grpc.CallOption) (*pb.JobCompany, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.JobCompany
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateJobCompanyRequest, ...grpc.CallOption) *pb.JobCompany); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.JobCompany)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateJobCompanyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LocalUpdateCompany provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) LocalUpdateCompany(ctx context.Context, in *pb.UpdateJobCompanyRequest, opts ...grpc.CallOption) (*pb.JobCompany, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.JobCompany
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateJobCompanyRequest, ...grpc.CallOption) *pb.JobCompany); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.JobCompany)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateJobCompanyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCompany provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) UpdateCompany(ctx context.Context, in *pb.UpdateJobCompanyRequest, opts ...grpc.CallOption) (*pb.JobCompany, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.JobCompany
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateJobCompanyRequest, ...grpc.CallOption) *pb.JobCompany); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.JobCompany)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateJobCompanyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobPost provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) UpdateJobPost(ctx context.Context, in *pb.UpdateJobPostRequest, opts ...grpc.CallOption) (*pb.JobPost, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.JobPost
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateJobPostRequest, ...grpc.CallOption) *pb.JobPost); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.JobPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateJobPostRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateKeyPerson provides a mock function with given fields: ctx, in, opts
func (_m *JoblistingServiceClient) UpdateKeyPerson(ctx context.Context, in *pb.UpdateKeyPersonRequest, opts ...grpc.CallOption) (*pb.KeyPerson, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.KeyPerson
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateKeyPersonRequest, ...grpc.CallOption) *pb.KeyPerson); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.KeyPerson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateKeyPersonRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
