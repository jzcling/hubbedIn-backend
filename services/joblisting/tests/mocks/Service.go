// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "in-backend/services/joblisting/models"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// BulkCreateJobPost provides a mock function with given fields: ctx, m
func (_m *Service) BulkCreateJobPost(ctx context.Context, m []*models.JobPost) ([]*models.JobPost, error) {
	ret := _m.Called(ctx, m)

	var r0 []*models.JobPost
	if rf, ok := ret.Get(0).(func(context.Context, []*models.JobPost) []*models.JobPost); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.JobPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []*models.JobPost) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BulkCreateKeyPerson provides a mock function with given fields: ctx, m
func (_m *Service) BulkCreateKeyPerson(ctx context.Context, m []*models.KeyPerson) ([]*models.KeyPerson, error) {
	ret := _m.Called(ctx, m)

	var r0 []*models.KeyPerson
	if rf, ok := ret.Get(0).(func(context.Context, []*models.KeyPerson) []*models.KeyPerson); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.KeyPerson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []*models.KeyPerson) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCompany provides a mock function with given fields: ctx, m
func (_m *Service) CreateCompany(ctx context.Context, m *models.Company) (*models.Company, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Company
	if rf, ok := ret.Get(0).(func(context.Context, *models.Company) *models.Company); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Company) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndustry provides a mock function with given fields: ctx, m
func (_m *Service) CreateIndustry(ctx context.Context, m *models.Industry) (*models.Industry, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Industry
	if rf, ok := ret.Get(0).(func(context.Context, *models.Industry) *models.Industry); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Industry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Industry) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobFunction provides a mock function with given fields: ctx, m
func (_m *Service) CreateJobFunction(ctx context.Context, m *models.JobFunction) (*models.JobFunction, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.JobFunction
	if rf, ok := ret.Get(0).(func(context.Context, *models.JobFunction) *models.JobFunction); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JobFunction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.JobFunction) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobPlatform provides a mock function with given fields: ctx, m
func (_m *Service) CreateJobPlatform(ctx context.Context, m *models.JobPlatform) (*models.JobPlatform, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.JobPlatform
	if rf, ok := ret.Get(0).(func(context.Context, *models.JobPlatform) *models.JobPlatform); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JobPlatform)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.JobPlatform) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobPost provides a mock function with given fields: ctx, m
func (_m *Service) CreateJobPost(ctx context.Context, m *models.JobPost) (*models.JobPost, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.JobPost
	if rf, ok := ret.Get(0).(func(context.Context, *models.JobPost) *models.JobPost); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JobPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.JobPost) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeyPerson provides a mock function with given fields: ctx, m
func (_m *Service) CreateKeyPerson(ctx context.Context, m *models.KeyPerson) (*models.KeyPerson, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.KeyPerson
	if rf, ok := ret.Get(0).(func(context.Context, *models.KeyPerson) *models.KeyPerson); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.KeyPerson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.KeyPerson) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCompany provides a mock function with given fields: ctx, id
func (_m *Service) DeleteCompany(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIndustry provides a mock function with given fields: ctx, id
func (_m *Service) DeleteIndustry(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteJobFunction provides a mock function with given fields: ctx, id
func (_m *Service) DeleteJobFunction(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteJobPlatform provides a mock function with given fields: ctx, id
func (_m *Service) DeleteJobPlatform(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteJobPost provides a mock function with given fields: ctx, id
func (_m *Service) DeleteJobPost(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteKeyPerson provides a mock function with given fields: ctx, id
func (_m *Service) DeleteKeyPerson(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCompanies provides a mock function with given fields: ctx, f
func (_m *Service) GetAllCompanies(ctx context.Context, f models.CompanyFilters) ([]*models.Company, error) {
	ret := _m.Called(ctx, f)

	var r0 []*models.Company
	if rf, ok := ret.Get(0).(func(context.Context, models.CompanyFilters) []*models.Company); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.CompanyFilters) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllIndustries provides a mock function with given fields: ctx, f
func (_m *Service) GetAllIndustries(ctx context.Context, f models.IndustryFilters) ([]*models.Industry, error) {
	ret := _m.Called(ctx, f)

	var r0 []*models.Industry
	if rf, ok := ret.Get(0).(func(context.Context, models.IndustryFilters) []*models.Industry); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Industry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.IndustryFilters) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllJobFunctions provides a mock function with given fields: ctx, f
func (_m *Service) GetAllJobFunctions(ctx context.Context, f models.JobFunctionFilters) ([]*models.JobFunction, error) {
	ret := _m.Called(ctx, f)

	var r0 []*models.JobFunction
	if rf, ok := ret.Get(0).(func(context.Context, models.JobFunctionFilters) []*models.JobFunction); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.JobFunction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.JobFunctionFilters) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllJobPlatforms provides a mock function with given fields: ctx, f
func (_m *Service) GetAllJobPlatforms(ctx context.Context, f models.JobPlatformFilters) ([]*models.JobPlatform, error) {
	ret := _m.Called(ctx, f)

	var r0 []*models.JobPlatform
	if rf, ok := ret.Get(0).(func(context.Context, models.JobPlatformFilters) []*models.JobPlatform); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.JobPlatform)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.JobPlatformFilters) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllJobPosts provides a mock function with given fields: ctx, f
func (_m *Service) GetAllJobPosts(ctx context.Context, f models.JobPostFilters) ([]*models.JobPost, error) {
	ret := _m.Called(ctx, f)

	var r0 []*models.JobPost
	if rf, ok := ret.Get(0).(func(context.Context, models.JobPostFilters) []*models.JobPost); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.JobPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.JobPostFilters) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllKeyPersons provides a mock function with given fields: ctx, f
func (_m *Service) GetAllKeyPersons(ctx context.Context, f models.KeyPersonFilters) ([]*models.KeyPerson, error) {
	ret := _m.Called(ctx, f)

	var r0 []*models.KeyPerson
	if rf, ok := ret.Get(0).(func(context.Context, models.KeyPersonFilters) []*models.KeyPerson); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.KeyPerson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.KeyPersonFilters) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobPostByID provides a mock function with given fields: ctx, id
func (_m *Service) GetJobPostByID(ctx context.Context, id uint64) (*models.JobPost, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.JobPost
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *models.JobPost); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JobPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyPersonByID provides a mock function with given fields: ctx, id
func (_m *Service) GetKeyPersonByID(ctx context.Context, id uint64) (*models.KeyPerson, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.KeyPerson
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *models.KeyPerson); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.KeyPerson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LocalCreateCompany provides a mock function with given fields: ctx, m
func (_m *Service) LocalCreateCompany(ctx context.Context, m *models.Company) (*models.Company, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Company
	if rf, ok := ret.Get(0).(func(context.Context, *models.Company) *models.Company); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Company) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LocalUpdateCompany provides a mock function with given fields: ctx, m
func (_m *Service) LocalUpdateCompany(ctx context.Context, m *models.Company) (*models.Company, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Company
	if rf, ok := ret.Get(0).(func(context.Context, *models.Company) *models.Company); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Company) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCompany provides a mock function with given fields: ctx, m
func (_m *Service) UpdateCompany(ctx context.Context, m *models.Company) (*models.Company, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.Company
	if rf, ok := ret.Get(0).(func(context.Context, *models.Company) *models.Company); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Company) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobPost provides a mock function with given fields: ctx, m
func (_m *Service) UpdateJobPost(ctx context.Context, m *models.JobPost) (*models.JobPost, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.JobPost
	if rf, ok := ret.Get(0).(func(context.Context, *models.JobPost) *models.JobPost); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JobPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.JobPost) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateKeyPerson provides a mock function with given fields: ctx, m
func (_m *Service) UpdateKeyPerson(ctx context.Context, m *models.KeyPerson) (*models.KeyPerson, error) {
	ret := _m.Called(ctx, m)

	var r0 *models.KeyPerson
	if rf, ok := ret.Get(0).(func(context.Context, *models.KeyPerson) *models.KeyPerson); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.KeyPerson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.KeyPerson) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
